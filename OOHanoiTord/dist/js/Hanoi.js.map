{"version":3,"sources":["../../src/js/Hanoi.js"],"names":["Hanoi","constructor","moves","pegs","towerOfHanoi","numberOfDisks","dir","pegMin","i","push","numberOfMoves","Math","pow","next","prev","moveSmallest","oldPegMin","moveDisk","topDiskSize","pegIndex","length","Number","MAX_VALUE","peg","from","to","pop"],"mappings":"AAAA;;;;;AAEe,MAAMA,KAAN,CAAY;AACzBC,gBAAa;AACX,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAY,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,CAAZ;AACD;AACDC,eAAaC,aAAb,EAA2B;AAC3B;AACA,QAAIC,MAAM,CAAV;AACA,QAAGD,gBAAgB,CAAhB,IAAqB,CAAxB,EAA0B;AACxBC,YAAM,CAAN;AACD,KAFD,MAEK;AACHA,YAAM,CAAC,CAAP;AACD;AACD;AACA,QAAIH,OAAO,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAX;AACA,QAAII,SAAS,CAAb;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,aAApB,EAAmCG,GAAnC,EAAwC;AACtC,WAAKL,IAAL,CAAU,CAAV,EAAaM,IAAb,CAAkBJ,gBAAgBG,CAAlC;AACD;;AAED,QAAIE,gBAAgBC,KAAKC,GAAL,CAAS,CAAT,EAAWP,aAAX,IAA4B,CAAhD;;AAEA;AACA,QAAIQ,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;AACA,QAAIC,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAX;;AAEA,QAAIC,eAAe,IAAnB;;AAEA,SAAKP,IAAI,CAAT,EAAYA,IAAIE,aAAhB,EAA+BF,GAA/B,EAAoC;AAChC,UAAIO,YAAJ,EAAkB;AAChB,YAAIC,YAAYT,MAAhB;AACA;AACAA,iBAAS,CAACS,YAAYV,GAAZ,GAAkB,CAAnB,IAAwB,CAAjC;AACA,aAAKW,QAAL,CAAcD,SAAd,EAAyBT,MAAzB,EAAiC,KAAKJ,IAAtC,EAA4C,KAAKD,KAAjD;AACD,OALD,MAMK;AACH,YAAI,KAAKgB,WAAL,CAAiBL,KAAKN,MAAL,CAAjB,IAAiC,KAAKW,WAAL,CAAiBJ,KAAKP,MAAL,CAAjB,CAArC,EAAqE;AACnE,eAAKU,QAAL,CAAcH,KAAKP,MAAL,CAAd,EAA4BM,KAAKN,MAAL,CAA5B;AACD,SAFD,MAGK;AACH,eAAKU,QAAL,CAAcJ,KAAKN,MAAL,CAAd,EAA4BO,KAAKP,MAAL,CAA5B;AACD;AACJ;AACDQ,qBAAe,CAACA,YAAhB;AACD;AACD;AACA,SAAKZ,IAAL,CAAUM,IAAV,CAAeC,aAAf;AACA,WAAO,KAAKP,IAAZ;AACA;;AAEDe,cAAYC,QAAZ,EAAsB;AACpB,QAAI,KAAKhB,IAAL,CAAUgB,QAAV,EAAoBC,MAApB,KAA+B,CAAnC,EAAqC;AACnC,aAAOC,OAAOC,SAAd;AACD;AACD,QAAIC,MAAM,KAAKpB,IAAL,CAAUgB,QAAV,CAAV;AACA,WAAOI,IAAIA,IAAIH,MAAJ,GAAW,CAAf,CAAP;AACD;;AAEDH,WAASO,IAAT,EAAeC,EAAf,EAAmB;AACjB;AACA,SAAKvB,KAAL,CAAWO,IAAX,CAAgB,CAACe,OAAK,CAAL,GAAQ,MAAR,GAAgBC,EAAhB,GAAmB,CAApB,CAAhB;AACA,SAAKtB,IAAL,CAAUsB,EAAV,EAAchB,IAAd,CAAmB,KAAKN,IAAL,CAAUqB,IAAV,EAAgBE,GAAhB,EAAnB;AACD;AA/DyB;kBAAN1B,K","file":"Hanoi.js","sourcesContent":["'use strict';\n\nexport default class Hanoi {\n  constructor(){\n    this.moves = [];\n    this.pegs = [[],[],[]];\n  }\n  towerOfHanoi(numberOfDisks){\n  // direction of rotation of the smallest disk\n  var dir = 0;\n  if(numberOfDisks % 2 == 0){\n    dir = 1;\n  }else{\n    dir = -1;\n  }\n  //CHANGE moves and Pegs to global variables;\n  var pegs = [[], [], []];\n  var pegMin = 0;\n\n  for (var i = 0; i < numberOfDisks; i++) {\n    this.pegs[0].push(numberOfDisks - i);\n  }\n\n  var numberOfMoves = Math.pow(2,numberOfDisks) - 1;\n\n  // To avoid using % operator we precompute next and prev tables\n  var next = [1, 2, 0];\n  var prev = [2, 0, 1];\n\n  var moveSmallest = true;\n\n  for (i = 0; i < numberOfMoves; i++) {\n      if (moveSmallest) {\n        var oldPegMin = pegMin;\n        // in JS -1 % 3 === -1, we add 3 to get positive result\n        pegMin = (oldPegMin + dir + 3) % 3;\n        this.moveDisk(oldPegMin, pegMin, this.pegs, this.moves);\n      }\n      else {\n        if (this.topDiskSize(next[pegMin]) > this.topDiskSize(prev[pegMin])) {\n          this.moveDisk(prev[pegMin], next[pegMin]);\n        }\n        else {\n          this.moveDisk(next[pegMin], prev[pegMin]);\n        }\n    }\n    moveSmallest = !moveSmallest;\n  }\n  //console.log(\"Number of moves: \"+numberOfMoves);\n  this.pegs.push(numberOfMoves);\n  return this.pegs;\n }\n\n topDiskSize(pegIndex) {\n   if (this.pegs[pegIndex].length === 0){\n     return Number.MAX_VALUE;\n   }\n   var peg = this.pegs[pegIndex]\n   return peg[peg.length-1];\n }\n\n moveDisk(from, to) {\n   // 1-FROM ROD, 2-USING ROD, 3-TO ROD\n   this.moves.push([from+1 +\" -> \"+ to+1]);\n   this.pegs[to].push(this.pegs[from].pop());\n }\n}\n"]}