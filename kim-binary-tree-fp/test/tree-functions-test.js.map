{"version":3,"sources":["../es6-test/tree-functions-test.js"],"names":["describe","it","tree","to","eql","createTestTree","leftTree","rightTree","expectedArray","wantedTree","initTree","comparable"],"mappings":"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","file":"tree-functions-test.js","sourcesContent":["import { insert, createNode, findNode, inOrderTraversal } from './../dist/js/tree-functions'\nimport { expect } from 'chai';\n\ndescribe('When insert() is used', function() {\n  it('New nodes should be added at the correct position', function() {\n    var tree = insert([13, 6, 20, 2, 9, 16, 24, 3, 7, 32]);\n    expect(tree).to.eql(createTestTree());\n    expect(insert(9, tree)).to.eql(createTestTree());\n    expect(insert(8, tree)).to.eql(createTestTree('o8'));\n    expect(insert(1, tree)).to.eql(createTestTree('o1'));\n    expect(insert(33, tree)).to.eql(createTestTree('o33'));\n  });\n});\n\ndescribe('When findNode() is used', function() {\n  it('findNode should return node containing comparable. If comparable is not in tree undefined should be returned', function() {\n    expect(findNode(5, createTestTree())).to.eql(null);\n    expect(findNode(13, createTestTree())).to.eql(createTestTree());\n    expect(findNode(2, createTestTree())).to.eql(createTestTree().leftTree.leftTree);\n    expect(findNode(32, createTestTree())).to.eql(createTestTree().rightTree.rightTree.rightTree);\n    expect(findNode(20, createTestTree())).to.eql(createTestTree().rightTree);\n  });\n});\n\ndescribe('inOrderTraversal()', function() {\n  it('Should return a sorted array of elements in the tree. If no numbers it should return empty array', function () {\n    var expectedArray = [2, 3, 6, 7, 9, 13, 16, 20, 24, 32];\n    expect(inOrderTraversal(createTestTree())).to.eql(expectedArray);\n    expectedArray = [];\n    expect(inOrderTraversal()).to.eql(expectedArray);\n    expect(inOrderTraversal({})).to.eql(expectedArray);\n\n  });\n});\n\nfunction createTestTree(wantedTree) {\n  var initTree = {\n    comparable: 13,\n    leftTree: {\n      comparable: 6,\n      leftTree: {\n        comparable: 2,\n        leftTree: null,\n        rightTree: {\n          comparable: 3,\n          leftTree: null,\n          rightTree: null\n        }\n      },\n      rightTree: {\n        comparable: 9,\n        leftTree: {\n          comparable: 7,\n          leftTree: null,\n          rightTree: null\n        },\n        rightTree: null\n      }\n    },\n    rightTree: {\n      comparable: 20,\n      leftTree: {\n        comparable: 16,\n        leftTree: null,\n        rightTree: null\n      },\n      rightTree: {\n        comparable: 24,\n        leftTree: null,\n        rightTree: {\n          comparable: 32,\n          leftTree: null,\n          rightTree: null\n        }\n      }\n    }\n  }\n\n  if (wantedTree === 'o8') {\n    initTree.leftTree.rightTree.leftTree.rightTree = createNode(8);\n  } else if (wantedTree === 'o1') {\n    initTree.leftTree.leftTree.leftTree = createNode(1);\n  } else if (wantedTree === 'o33') {\n    initTree.rightTree.rightTree.rightTree.rightTree = createNode(33);\n  }\n\n  return initTree;\n}\n"]}