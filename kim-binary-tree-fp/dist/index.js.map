{"version":3,"sources":["../src/index.js"],"names":["console","log","size","runMeasurements","global","gc","hrStart","process","hrtime","startMem","memoryUsage","rss","info","inspect","tree","createRandomTree","getRandom","endMem","hrEnd","random","Math","floor"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AAEAA,QAAQC,GAAR,CAAY,2BAAZ;AACA,IAAIC,OAAO,KAAX;AACAF,QAAQC,GAAR,CAAY,gBAAgBC,IAA5B;;AAEAC,gBAAgBD,IAAhB;AACAE,OAAOC,EAAP;;AAEA,SAASF,eAAT,CAAyBD,IAAzB,EAA+B;AAC7B,MAAII,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,GAArC;AACAX,UAAQY,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA1B;AACA,MAAII,OAAOC,iBAAiBb,IAAjB,CAAX;AACAF,UAAQY,IAAR,CAAa,oBAAoB,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAAjC;AACA,uCAAiBI,IAAjB;AACAd,UAAQY,IAAR,CAAa,8BAA8B,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA3C;AACA,+BAASM,WAAT,EAAsBF,IAAtB;AACA,+BAASE,WAAT,EAAsBF,IAAtB;AACA,+BAASE,WAAT,EAAsBF,IAAtB;AACA,MAAIG,SAASV,QAAQG,WAAR,GAAsBC,GAAnC;AACAX,UAAQY,IAAR,CAAa,gCAAgC,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA7C;;AAEA,MAAIQ,QAAQX,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAN,UAAQY,IAAR,CAAa,cAAcM,MAAM,CAAN,CAAd,GAAyB,QAAzB,GAAoCA,MAAM,CAAN,IAAW,OAA/C,GAAyD,IAAtE;AACAlB,UAAQY,IAAR,CAAa,cAAcK,SAASR,QAAvB,CAAb;AACD;;AAED,SAASM,gBAAT,CAA0Bb,IAA1B,EAAgCY,IAAhC,EAAsC;AACpC,MAAIZ,QAAQ,CAAZ,EAAe;AACb,WAAOY,IAAP;AACD,GAFD,MAEO;AACL,QAAIK,SAASH,WAAb;AACA,QAAI,6BAASG,MAAT,EAAiBL,IAAjB,CAAJ,EAA4B;AAC1B,aAAOC,iBAAiBb,IAAjB,EAAuB,2BAAOiB,MAAP,EAAeL,IAAf,CAAvB,CAAP;AACD,KAFD,MAEO;AACL,aAAOC,iBAAiBb,OAAO,CAAxB,EAA2B,2BAAOiB,MAAP,EAAeL,IAAf,CAA3B,CAAP;AACD;AACF;AACF;;AAED,SAASE,SAAT,GAAqB;AACnB,SAAOI,KAAKC,KAAL,CAAYD,KAAKD,MAAL,KAAgBjB,IAAhB,GAAuB,EAAxB,GAA8B,CAAzC,CAAP;AACD","file":"index.js","sourcesContent":["import util from 'util';\r\nimport { insert, findNode, inOrderTraversal } from './js/tree-functions'\r\n'use strict';\r\n\r\nconsole.log('Search tree algorithms FP');\r\nvar size = 10000;\r\nconsole.log(\"Data size: \" + size);\r\n\r\nrunMeasurements(size);\r\nglobal.gc();\r\n\r\nfunction runMeasurements(size) {\r\n  var hrStart = process.hrtime();\r\n  var startMem = process.memoryUsage().rss;\r\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\r\n  var tree = createRandomTree(size);\r\n  console.info('after insert:\\n' + util.inspect(process.memoryUsage()));\r\n  inOrderTraversal(tree);\r\n  console.info('after inOrderTraversal:\\n' + util.inspect(process.memoryUsage()));\r\n  findNode(getRandom(), tree);\r\n  findNode(getRandom(), tree);\r\n  findNode(getRandom(), tree);\r\n  var endMem = process.memoryUsage().rss;\r\n  console.info('after 3x random findNode:\\n' + util.inspect(process.memoryUsage()));\r\n\r\n  let hrEnd = process.hrtime(hrStart);\r\n  console.info('Runtime: ' + hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\r\n  console.info('Memory: ' + (endMem - startMem));\r\n}\r\n\r\nfunction createRandomTree(size, tree) {\r\n  if (size <= 0) {\r\n    return tree;\r\n  } else {\r\n    var random = getRandom();\r\n    if (findNode(random, tree)) {\r\n      return createRandomTree(size, insert(random, tree));\r\n    } else {\r\n      return createRandomTree(size - 1, insert(random, tree));\r\n    }\r\n  }\r\n}\r\n\r\nfunction getRandom() {\r\n  return Math.floor((Math.random() * size * 10) + 1);\r\n}\r\n"]}