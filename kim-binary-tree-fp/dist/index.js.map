{"version":3,"sources":["../src/index.js"],"names":["size","runMeasurements","hrStart","process","hrtime","startMem","memoryUsage","heapUsed","console","info","inspect","tree","createRandomTree","getRandom","endMem","hrEnd","random","Math","floor"],"mappings":";;AAAA;;;;AACA;;;;AACA;;AAEA,IAAIA,OAAO,KAAX;;AAEAC,gBAAgBD,IAAhB;;AAEA,SAASC,eAAT,CAAyBD,IAAzB,EAA+B;AAC7B,MAAIE,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,QAArC;AACAC,UAAQC,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaP,QAAQG,WAAR,EAAb,CAA1B;AACA,MAAIK,OAAOC,iBAAiBZ,IAAjB,CAAX;AACAQ,UAAQC,IAAR,CAAa,oBAAoB,eAAKC,OAAL,CAAaP,QAAQG,WAAR,EAAb,CAAjC;AACA,uCAAiBK,IAAjB;AACAH,UAAQC,IAAR,CAAa,8BAA8B,eAAKC,OAAL,CAAaP,QAAQG,WAAR,EAAb,CAA3C;AACA,+BAASO,WAAT,EAAsBF,IAAtB;AACA,+BAASE,WAAT,EAAsBF,IAAtB;AACA,+BAASE,WAAT,EAAsBF,IAAtB;AACA,MAAIG,SAASX,QAAQG,WAAR,GAAsBC,QAAnC;AACAC,UAAQC,IAAR,CAAa,gCAAgC,eAAKC,OAAL,CAAaP,QAAQG,WAAR,EAAb,CAA7C;;AAEA,MAAIS,QAAQZ,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAM,UAAQC,IAAR,CAAaM,MAAM,CAAN,IAAW,QAAX,GAAsBA,MAAM,CAAN,IAAW,OAAjC,GAA2C,IAAxD;AACAP,UAAQC,IAAR,CAAa,2BAA2BJ,QAAxC;AACAG,UAAQC,IAAR,CAAa,yBAAyBK,MAAtC;AACAN,UAAQC,IAAR,CAAaM,MAAM,CAAN,IAAW,IAAX,GAAkBA,MAAM,CAAN,IAAW,OAA1C;AACAP,UAAQC,IAAR,CAAaK,SAAST,QAAtB;AACD;;AAED,SAASO,gBAAT,CAA0BZ,IAA1B,EAAgCW,IAAhC,EAAsC;AACpC,MAAIX,QAAQ,CAAZ,EAAe;AACb,WAAOW,IAAP;AACD,GAFD,MAEO;AACL,QAAIK,SAASH,WAAb;AACA,QAAI,6BAASG,MAAT,EAAiBL,IAAjB,CAAJ,EAA4B;AAC1B,aAAOC,iBAAiBZ,IAAjB,EAAuB,2BAAOgB,MAAP,EAAeL,IAAf,CAAvB,CAAP;AACD,KAFD,MAEO;AACL,aAAOC,iBAAiBZ,OAAO,CAAxB,EAA2B,2BAAOgB,MAAP,EAAeL,IAAf,CAA3B,CAAP;AACD;AACF;AACF;;AAED,SAASE,SAAT,GAAqB;AACnB,SAAOI,KAAKC,KAAL,CAAYD,KAAKD,MAAL,KAAgBhB,IAAhB,GAAuB,EAAxB,GAA8B,CAAzC,CAAP;AACD","file":"index.js","sourcesContent":["import util from 'util';\r\nimport { insert, findNode, inOrderTraversal } from './js/tree-functions'\r\n'use strict';\r\n\r\nvar size = 10000;\r\n\r\nrunMeasurements(size);\r\n\r\nfunction runMeasurements(size) {\r\n  var hrStart = process.hrtime();\r\n  var startMem = process.memoryUsage().heapUsed;\r\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\r\n  var tree = createRandomTree(size);\r\n  console.info('after insert:\\n' + util.inspect(process.memoryUsage()));\r\n  inOrderTraversal(tree);\r\n  console.info('after inOrderTraversal:\\n' + util.inspect(process.memoryUsage()));\r\n  findNode(getRandom(), tree);\r\n  findNode(getRandom(), tree);\r\n  findNode(getRandom(), tree);\r\n  var endMem = process.memoryUsage().heapUsed;\r\n  console.info('after 3x random findNode:\\n' + util.inspect(process.memoryUsage()));\r\n\r\n  let hrEnd = process.hrtime(hrStart);\r\n  console.info(hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\r\n  console.info('Initial memory usage: ' + startMem);\r\n  console.info('Final memory usage: ' + endMem);\r\n  console.info(hrEnd[0] * 1000 + hrEnd[1] / 1000000);\r\n  console.info(endMem - startMem);\r\n}\r\n\r\nfunction createRandomTree(size, tree) {\r\n  if (size <= 0) {\r\n    return tree;\r\n  } else {\r\n    var random = getRandom();\r\n    if (findNode(random, tree)) {\r\n      return createRandomTree(size, insert(random, tree));\r\n    } else {\r\n      return createRandomTree(size - 1, insert(random, tree));\r\n    }\r\n  }\r\n}\r\n\r\nfunction getRandom() {\r\n  return Math.floor((Math.random() * size * 10) + 1);\r\n}\r\n"]}