{"version":3,"sources":["../../src/js/tree-functions.js"],"names":["insert","comparable","root","createNode","copyRoot","Object","assign","rightTree","leftTree","inOrderTraversal","array","concat"],"mappings":";;;;;AAAA,SAASA,MAAT,CAAgBC,UAAhB,EAA4BC,IAA5B,EAAkC;AAChC,MAAI,CAACA,IAAL,EAAW;AACT,WAAOC,WAAWF,UAAX,CAAP;AACD;;AAED,MAAIG,WAAWC,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,IAAlB,CAAf,CALgC,CAKQ;;AAExC,MAAID,eAAeG,SAASH,UAA5B,EAAwC;AACtC,WAAOG,QAAP;AACD,GAFD,MAEO,IAAIH,aAAaG,SAASH,UAA1B,EAAsC;AAC3C,QAAI,CAACG,SAASG,SAAd,EAAyB;AACvBH,eAASG,SAAT,GAAqBJ,WAAWF,UAAX,CAArB;AACA,aAAOG,QAAP;AACD,KAHD,MAGO;AACL,aAAOJ,OAAOC,UAAP,EAAmBG,SAASG,SAA5B,CAAP;AACD;AACF,GAPM,MAOA;AACL,QAAI,CAACH,SAASI,QAAd,EAAwB;AACtBJ,eAASI,QAAT,GAAoBL,WAAWF,UAAX,CAApB;AACA,aAAOG,QAAP;AACD,KAHD,MAGO;AACL,aAAOJ,OAAOC,UAAP,EAAmBG,SAASI,QAA5B,CAAP;AACD;AACF;AACF;;AAED,SAASL,UAAT,CAAoBF,UAApB,EAAgC;AAC9B,SAAO;AACLA,gBAAYA,UADP;AAELM,eAAW,IAFN;AAGLC,cAAU;AAHL,GAAP;AAKD;;AAED,SAASC,gBAAT,CAA0BP,IAA1B,EAAgC;AAC9B,MAAIQ,QAAQ,EAAZ;AACA,MAAI,CAACR,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,MAAIA,KAAKD,UAAL,KAAoB,IAAxB,EAA8B;AAC5B,WAAOS,KAAP;AACD,GAFD,MAEO;AACLA,YAAQA,MAAMC,MAAN,CAAaF,iBAAiBP,KAAKM,QAAtB,CAAb,CAAR;AACAE,YAAQA,MAAMC,MAAN,CAAa,CAACT,KAAKD,UAAN,CAAb,CAAR;AACAS,YAAQA,MAAMC,MAAN,CAAaF,iBAAiBP,KAAKK,SAAtB,CAAb,CAAR;AACA,WAAOG,KAAP;AACD;AACF;;QAGCV,M,GAAAA,M;QACAG,U,GAAAA,U;QACAM,gB,GAAAA,gB","file":"tree-functions.js","sourcesContent":["function insert(comparable, root) {\n  if (!root) {\n    return createNode(comparable);\n  }\n\n  var copyRoot = Object.assign({}, root); //Copy root\n\n  if (comparable === copyRoot.comparable) {\n    return copyRoot;\n  } else if (comparable > copyRoot.comparable) {\n    if (!copyRoot.rightTree) {\n      copyRoot.rightTree = createNode(comparable);\n      return copyRoot;\n    } else {\n      return insert(comparable, copyRoot.rightTree);\n    }\n  } else {\n    if (!copyRoot.leftTree) {\n      copyRoot.leftTree = createNode(comparable);\n      return copyRoot;\n    } else {\n      return insert(comparable, copyRoot.leftTree);\n    }\n  }\n}\n\nfunction createNode(comparable) {\n  return {\n    comparable: comparable,\n    rightTree: null,\n    leftTree: null\n  }\n}\n\nfunction inOrderTraversal(root) {\n  var array = [];\n  if (!root) {\n    return [];\n  }\n\n  if (root.comparable === null) {\n    return array;\n  } else {\n    array = array.concat(inOrderTraversal(root.leftTree));\n    array = array.concat([root.comparable]);\n    array = array.concat(inOrderTraversal(root.rightTree));\n    return array;\n  }\n}\n\nexport {\n  insert,\n  createNode,\n  inOrderTraversal\n}\n"]}