{"version":3,"sources":["../../src/js/tree-functions.js"],"names":["insertOne","comparable","root","createNode","copyRoot","Object","assign","rightTree","insert","leftTree","inOrderTraversal","array","concat","findNode","comparables","Number","isInteger","length","slice"],"mappings":";;;;;;;AAAA;;AAEA,SAASA,SAAT,CAAmBC,UAAnB,EAA+BC,IAA/B,EAAqC;AACjC,MAAI,CAACA,IAAL,EAAW;AACT,WAAOC,WAAWF,UAAX,CAAP;AACD;;AAED,MAAIG,WAAWC,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,IAAlB,CAAf,CALiC,CAKO;;AAExC,MAAID,aAAaG,SAASH,UAA1B,EAAsC;AACpC,QAAI,CAACG,SAASG,SAAd,EAAyB;AACvBH,eAASG,SAAT,GAAqBJ,WAAWF,UAAX,CAArB;AACD,KAFD,MAEO;AACLG,eAASG,SAAT,GAAqBC,OAAOP,UAAP,EAAmBG,SAASG,SAA5B,CAArB;AACD;AACF,GAND,MAMO,IAAIN,aAAaG,SAASH,UAA1B,EAAsC;AAC3C,QAAI,CAACG,SAASK,QAAd,EAAwB;AACtBL,eAASK,QAAT,GAAoBN,WAAWF,UAAX,CAApB;AACD,KAFD,MAEO;AACLG,eAASK,QAAT,GAAoBD,OAAOP,UAAP,EAAmBG,SAASK,QAA5B,CAApB;AACD;AACF;AACD,SAAOL,QAAP;AACH;;AAED,SAASD,UAAT,CAAoBF,UAApB,EAAgC;AAC9B,SAAO;AACLA,gBAAYA,UADP;AAELM,eAAW,IAFN;AAGLE,cAAU;AAHL,GAAP;AAKD;;AAED,SAASC,gBAAT,CAA0BR,IAA1B,EAAgC;AAC9B,MAAIS,QAAQ,EAAZ;AACA,MAAI,CAACT,IAAL,EAAW;AACT,WAAO,EAAP;AACD;;AAED,MAAI,CAACA,KAAKD,UAAV,EAAsB;AACpB,WAAOU,KAAP;AACD,GAFD,MAEO;AACLA,YAAQA,MAAMC,MAAN,CAAaF,iBAAiBR,KAAKO,QAAtB,CAAb,CAAR;AACAE,YAAQA,MAAMC,MAAN,CAAa,CAACV,KAAKD,UAAN,CAAb,CAAR;AACAU,YAAQA,MAAMC,MAAN,CAAaF,iBAAiBR,KAAKK,SAAtB,CAAb,CAAR;AACA,WAAOI,KAAP;AACD;AACF;;AAED,SAASE,QAAT,CAAkBZ,UAAlB,EAA8BC,IAA9B,EAAoC;AAClC,MAAI,CAACA,IAAD,IAAS,CAACD,UAAd,EAA0B;AACxB,WAAO,IAAP;AACD;;AAED,MAAIA,eAAeC,KAAKD,UAAxB,EAAoC;AAClC,WAAOC,IAAP;AACD,GAFD,MAEO,IAAID,aAAaC,KAAKD,UAAtB,EAAkC;AACvC,WAAOY,SAASZ,UAAT,EAAqBC,KAAKK,SAA1B,CAAP;AACD,GAFM,MAEA;AACL,WAAOM,SAASZ,UAAT,EAAqBC,KAAKO,QAA1B,CAAP;AACD;AACF;;AAED,SAASD,MAAT,CAAgBM,WAAhB,EAA6BZ,IAA7B,EAAmC;AACjC,MAAIa,OAAOC,SAAP,CAAiBF,WAAjB,CAAJ,EAAmC;AACjC,WAAOd,UAAUc,WAAV,EAAuBZ,IAAvB,CAAP;AACD,GAFD,MAEO,IAAIY,YAAYG,MAAZ,KAAuB,CAA3B,EAA8B;AACnC,WAAOjB,UAAUc,YAAY,CAAZ,CAAV,EAA0BZ,IAA1B,CAAP;AACD,GAFM,MAEA;AACL,WAAOM,OAAOM,YAAYI,KAAZ,CAAkB,CAAlB,CAAP,EAA6BlB,UAAUc,YAAY,CAAZ,CAAV,EAA0BZ,IAA1B,CAA7B,CAAP;AACD;AACF;;QAGCM,M,GAAAA,M;QACAL,U,GAAAA,U;QACAO,gB,GAAAA,gB;QACAG,Q,GAAAA,Q","file":"tree-functions.js","sourcesContent":["import { compose } from './general-functions'\n\nfunction insertOne(comparable, root) {\n    if (!root) {\n      return createNode(comparable);\n    }\n\n    var copyRoot = Object.assign({}, root); //Copy root\n\n    if (comparable > copyRoot.comparable) {\n      if (!copyRoot.rightTree) {\n        copyRoot.rightTree = createNode(comparable);\n      } else {\n        copyRoot.rightTree = insert(comparable, copyRoot.rightTree);\n      }\n    } else if (comparable < copyRoot.comparable) {\n      if (!copyRoot.leftTree) {\n        copyRoot.leftTree = createNode(comparable);\n      } else {\n        copyRoot.leftTree = insert(comparable, copyRoot.leftTree);\n      }\n    }\n    return copyRoot;\n}\n\nfunction createNode(comparable) {\n  return {\n    comparable: comparable,\n    rightTree: null,\n    leftTree: null\n  }\n}\n\nfunction inOrderTraversal(root) {\n  var array = [];\n  if (!root) {\n    return [];\n  }\n\n  if (!root.comparable) {\n    return array;\n  } else {\n    array = array.concat(inOrderTraversal(root.leftTree));\n    array = array.concat([root.comparable]);\n    array = array.concat(inOrderTraversal(root.rightTree));\n    return array;\n  }\n}\n\nfunction findNode(comparable, root) {\n  if (!root || !comparable) {\n    return null;\n  }\n\n  if (comparable === root.comparable) {\n    return root;\n  } else if (comparable > root.comparable) {\n    return findNode(comparable, root.rightTree);\n  } else {\n    return findNode(comparable, root.leftTree);\n  }\n}\n\nfunction insert(comparables, root) {\n  if (Number.isInteger(comparables)) {\n    return insertOne(comparables, root);\n  } else if (comparables.length === 1) {\n    return insertOne(comparables[0], root);\n  } else {\n    return insert(comparables.slice(1), insertOne(comparables[0], root));\n  }\n}\n\nexport {\n  insert,\n  createNode,\n  inOrderTraversal,\n  findNode\n}\n"]}