{"version":3,"sources":["../../src/js/BinarySearchTree.js"],"names":["BinarySearchTree","constructor","tree","root","findNode","key","node","returnValue","_BinaryNode","leftNode","rightNode","inOrderTraversal","array","indexOf","push","parentNode","insert","insertRandomValues","nrOfElements","resultCheck","i","Math","floor","random","insertMany","arr","length","toString"],"mappings":"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","file":"BinarySearchTree.js","sourcesContent":["'use strict';\n\nexport default class BinarySearchTree {\n  constructor(tree) {\n    this.root = null;\n  }\n\n  findNode(key){\n    var node = this.root;\n    var returnValue = new _BinaryNode(null);\n    while(node != null && key != node.key){\n      if(key < node.key){\n        node = node.leftNode;\n      }else if(key > node.key){\n        node = node.rightNode;\n      }\n    }\n    if(node != null){\n      returnValue = node;\n    }\n\n    return returnValue;\n  }\n\n  inOrderTraversal(){\n    var array = [];\n    var node = this.root;\n    while(node != null){\n      if(node.leftNode != null && array.indexOf(node.leftNode.key) == -1 ){\n        node = node.leftNode;\n      }else if(array.indexOf(node.key) == -1){\n        array.push(node.key);\n      }else if(node.rightNode != null && array.indexOf(node.rightNode.key) == -1){\n        node = node.rightNode;\n      }else{\n        node = node.parentNode;\n      }\n    }\n    return array;\n  }\n\n  insert(key){\n    var returnValue = false;\n    if(this.root == null){\n      this.root = new _BinaryNode(key);\n      returnValue = true;\n    }else{\n      var node = this.root;\n      while(node != null && key != node.key ){\n        if(key < node.key){\n          if(node.leftNode == null){\n            node.leftNode = new _BinaryNode(key);\n            node.leftNode.parentNode = node;\n            node = null;\n            returnValue = true;\n          }else{\n            node = node.leftNode;\n          }\n        }else if(key > node.key){\n          if(node.rightNode == null){\n            node.rightNode = new _BinaryNode(key);\n            node.rightNode.parentNode = node;\n            node = null;\n            returnValue = true;\n          }else{\n            node = node.rightNode;\n          }\n        }\n      }\n    }\n\n    return returnValue;\n  }\n\n  insertRandomValues(nrOfElements){\n    var resultCheck = false;\n    for(var i = 0; i < nrOfElements; i++){\n      resultCheck = this.insert(Math.floor((Math.random() * nrOfElements * 10) + 1));\n      if(resultCheck == false){\n        i--;\n      }\n    }\n  }\n\n  insertMany(arr){\n    for(var i = 0; i < arr.length; i++){\n      this.insert(arr[i]);\n    }\n  }\n}\n\nexport class _BinaryNode{\n  constructor(key){\n    this.key = key;\n    this.parentNode = null;\n    this.leftNode = null;\n    this.rightNode = null;\n  }\n\n  toString(){\n    var parentNode = null;\n    var leftNode = null;\n    var rightNode = null;\n    if(this.parentNode != null){\n      parentNode = this.parentNode.key;\n    }\n    if(this.leftNode != null){\n      leftNode = this.leftNode.key;\n    }\n    if(this.rightNode != null){\n      rightNode = this.rightNode.key;\n    }\n    return \"Key:\"+this.key+\"\\nParentNode:\"+parentNode+\"\\nLeftNode:\"+leftNode+\"\\nRightNode:\"+rightNode;\n  }\n}\n"]}