{"version":3,"sources":["../../src/js/BinarySearchTree.js"],"names":["BinarySearchTree","constructor","tree","length","root","_BinaryNode","i","node","key","leftNode","undefined","parentNode","rightNode","findNode","returnValue","inOrderTraversal","array","indexOf","push","insert"],"mappings":"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","file":"BinarySearchTree.js","sourcesContent":["'use strict';\n\nexport default class BinarySearchTree {\n  constructor(tree) {\n    if(tree.length > 0){\n      this.root = new _BinaryNode(tree[0]);\n      for(var i =1; i < tree.length; i++){\n        var node = this.root;\n        while(node != null){\n          if(tree[i] < node.key){\n            if(node.leftNode == undefined){\n              node.leftNode = new _BinaryNode(tree[i]);\n              node.leftNode.parentNode = node;\n              node = null;\n            }else{\n              node = node.leftNode;\n            }\n          }else{\n            if(node.rightNode == undefined){\n              node.rightNode = new _BinaryNode(tree[i]);\n              node.rightNode.parentNode = node;\n              node = null;\n            }else{\n              node = node.rightNode;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  findNode(key){\n    var node = this.root;\n    var returnValue = undefined;\n    while(node != null && key != node.key){\n      if(key < node.key){\n        node = node.leftNode;\n      }else if(key > node.key){\n        node = node.rightNode;\n      }\n    }\n    if(node != null){\n      returnValue = node.key;\n    }\n\n    return returnValue;\n  }\n\n  inOrderTraversal(){\n    var array = [];\n    var node = this.root;\n    while(node != null){\n      if(node.leftNode != null && array.indexOf(node.leftNode.key) == -1 ){\n        node = node.leftNode;\n      }else if(array.indexOf(node.key) == -1){\n        array.push(node.key);\n      }else if(node.rightNode != null && array.indexOf(node.rightNode.key) == -1){\n        node = node.rightNode;\n      }else{\n        node = node.parentNode;\n      }\n    }\n    return array;\n  }\n\n  insert(key){\n    var returnValue = false;\n    if(this.root == null){\n      this.root = new _BinaryNode(key);\n      returnValue = true;\n    }else{\n      var node = this.root;\n      while(node != null && key != node.key ){\n        if(key < node.key){\n          if(node.leftNode == null){\n            node.leftNode = new _BinaryNode(key);\n            node.leftNode.parentNode = node;\n            node = null;\n            returnValue = true;\n          }else{\n            node = node.leftNode;\n          }\n        }else if(key > node.key){\n          if(node.rightNode == null){\n            node.rightNode = new _BinaryNode(key);\n            node.rightNode.parentNode = node;\n            node = null;\n            returnValue = true;\n          }else{\n            node = node.rightNode;\n          }\n        }\n      }\n    }\n\n    return returnValue;\n  }\n}\n\nclass _BinaryNode{\n  constructor(key){\n    this.key = key;\n    this.parentNode = null;\n    this.leftNode = null;\n    this.rightNode = null;\n  }\n}\n"]}