{"version":3,"sources":["../src/index.js"],"names":["console","log","nrOfElements","runBinarySearchTree","global","gc","hrStart","process","hrtime","startMem","memoryUsage","rss","info","inspect","BST","insertRandomValues","inOrderTraversal","findNode","Math","floor","random","endMem","hrEnd"],"mappings":";;AAAA;;;;AAEA;;;;;;AACA;;AAEAA,QAAQC,GAAR,CAAY,6BAAZ;AACA,IAAIC,eAAe,KAAnB;AACAF,QAAQC,GAAR,CAAY,yBAAyBC,YAArC;AACAC,oBAAoBD,YAApB;;AAEAE,OAAOC,EAAP;;AAEA,SAASF,mBAAT,GAA+B;AAC7B,MAAIG,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,GAArC;AACAX,UAAQY,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA1B;;AAEA,MAAII,MAAM,gCAAV;AACAA,MAAIC,kBAAJ,CAAuBb,YAAvB;AACAF,UAAQY,IAAR,CAAa,oBAAoB,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAAjC;AACAI,MAAIE,gBAAJ;AACAhB,UAAQY,IAAR,CAAa,8BAA8B,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA3C;AACAI,MAAIG,QAAJ,CAAaC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBlB,YAAhB,GAA+B,EAAhC,GAAsC,CAAjD,CAAb;AACAY,MAAIG,QAAJ,CAAaC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBlB,YAAhB,GAA+B,EAAhC,GAAsC,CAAjD,CAAb;AACAY,MAAIG,QAAJ,CAAaC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBlB,YAAhB,GAA+B,EAAhC,GAAsC,CAAjD,CAAb;AACA,MAAImB,SAASd,QAAQG,WAAR,GAAsBC,GAAnC;AACAX,UAAQY,IAAR,CAAa,gCAAgC,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA7C;;AAEA,MAAIY,QAAQf,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAN,UAAQY,IAAR,CAAa,cAAcU,MAAM,CAAN,CAAd,GAAyB,SAAzB,GAAqCA,MAAM,CAAN,IAAW,OAAhD,GAA0D,KAAvE;AACAtB,UAAQY,IAAR,CAAa,cAAcS,SAASZ,QAAvB,CAAb;AACD","file":"index.js","sourcesContent":["import BinarySearchTree from './js/BinarySearchTree.js';\nimport _BinaryNode from './js/BinarySearchTree.js';\nimport util from 'util';\n'use strict';\n\nconsole.log(\"OOP Tree search algorithms:\");\nvar nrOfElements = 10000;\nconsole.log(\"Number of elements: \" + nrOfElements);\nrunBinarySearchTree(nrOfElements);\n\nglobal.gc();\n\nfunction runBinarySearchTree() {\n  var hrStart = process.hrtime();\n  var startMem = process.memoryUsage().rss;\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\n\n  let BST = new BinarySearchTree();\n  BST.insertRandomValues(nrOfElements);\n  console.info('after insert:\\n' + util.inspect(process.memoryUsage()));\n  BST.inOrderTraversal();\n  console.info('after inOrderTraversal:\\n' + util.inspect(process.memoryUsage()));\n  BST.findNode(Math.floor((Math.random() * nrOfElements * 10) + 1));\n  BST.findNode(Math.floor((Math.random() * nrOfElements * 10) + 1));\n  BST.findNode(Math.floor((Math.random() * nrOfElements * 10) + 1));\n  var endMem = process.memoryUsage().rss;\n  console.info('after 3x random findNode:\\n' + util.inspect(process.memoryUsage()));\n\n  let hrEnd = process.hrtime(hrStart);\n  console.info('Runtime: ' + hrEnd[0] + ' s and ' + hrEnd[1] / 1000000 + ' ms');\n  console.info('Memory: ' + (endMem - startMem));\n}\n"]}