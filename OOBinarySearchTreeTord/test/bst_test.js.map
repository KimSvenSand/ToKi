{"version":3,"sources":["../es6-test/bst_test.js"],"names":["describe","treeArray","BST","insertMany","BST2","expectedResult","input","it","insert","to","equal","findNode","toString","inOrderTraversal","eql"],"mappings":"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","file":"bst_test.js","sourcesContent":["import BinarySearchTree from '../dist/js/BinarySearchTree';\nimport _BinaryNode from '../dist/js/BinarySearchTree';\nimport { expect } from 'chai';\n\ndescribe('BinarySearchTree', function() {\n  var treeArray = [13,6,24,2,3,7,9,16,20,32];\n  var BST = new BinarySearchTree();\n  BST.insertMany(treeArray);\n  var BST2 = new BinarySearchTree();\n  var expectedResult = 0;\n  var input = 0;\n\n  describe('insert',function(){\n    it('inserts a number thats already in the tree, so should return false', function(){\n        input = 9;\n        expectedResult = false;\n        expect(BST.insert(input)).to.equal(expectedResult);\n    });\n  });\n\n  describe('insert',function(){\n    it('Inserts a number that is not in the tree. Should return true', function(){\n        input = 8;\n        expectedResult = true;\n        expect(BST.insert(input)).to.equal(expectedResult);\n    });\n  });\n\n  describe('insert',function(){\n    it('Inserts a number that is not in the tree. Should return true', function(){\n        input = 1;\n        expectedResult = true;\n        expect(BST.insert(input)).to.equal(expectedResult);\n    });\n  });\n\n  describe('insert',function(){\n    it('Inserts a number that is not in the tree. Should return true', function(){\n        input = 33;\n        expectedResult = true;\n        expect(BST.insert(input)).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return empty node since the node isnt in the tree', function() {\n      input = 5;\n      expectedResult = \"Key:null\\nParentNode:null\\nLeftNode:null\\nRightNode:null\";\n      expect(BST.findNode(input).toString()).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return the node with key 13, to not get all the links to the whole tree, I use a toString function', function() {\n      input = 13;\n      expectedResult = \"Key:13\\nParentNode:null\\nLeftNode:6\\nRightNode:24\";\n\n      expect(BST.findNode(input).toString()).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return the node with key 2, to not get all the links to the whole tree, I use a toString function', function() {\n      input = 2;\n      expectedResult = \"Key:2\\nParentNode:6\\nLeftNode:1\\nRightNode:3\";\n\n      expect(BST.findNode(input).toString()).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return the node with key 32, to not get all the links to the whole tree, I use a toString function', function() {\n      input = 32;\n      expectedResult = \"Key:32\\nParentNode:24\\nLeftNode:null\\nRightNode:33\";\n      expect(BST.findNode(input).toString()).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return the node with key 20, to not get all the links to the whole tree, I use a toString function', function() {\n      input = 20;\n      expectedResult = \"Key:20\\nParentNode:16\\nLeftNode:null\\nRightNode:null\";\n\n      expect(BST.findNode(input).toString()).to.equal(expectedResult);\n    });\n  });\n\n  describe('inOrderTravelsal', function() {\n    it(\"should return treeArray sorted\", function() {\n      expectedResult = [1,2,3,6,7,8,9,13,16,20,24,32,33];\n\n      expect(BST.inOrderTraversal()).to.eql(expectedResult);\n    });\n  });\n\n  describe('inOrderTravelsal in empty tree', function() {\n    it(\"should return empty array\", function() {\n      expectedResult = [];\n\n      expect(BST2.inOrderTraversal()).to.eql(expectedResult);\n    });\n  })\n});\n"]}