{"version":3,"sources":["../es6-test/bst_test.js"],"names":["describe","treeArray","emptyTree","BST","BST2","expectedResult","input","it","inOrderTraversal","to","eql","findNode","equal","undefined","insert"],"mappings":";;AAAA;;;;AACA;;;;AAEAA,SAAS,kBAAT,EAA6B,YAAW;AACtC,MAAIC,YAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAhB;AACA,MAAIC,YAAY,EAAhB;AACA,MAAIC,MAAM,+BAAqBF,SAArB,CAAV;AACA,MAAIG,OAAO,+BAAqBF,SAArB,CAAX;AACA,MAAIG,iBAAiB,CAArB;AACA,MAAIC,QAAQ,CAAZ;;AAEAN,WAAS,kBAAT,EAA6B,YAAW;AACtCO,OAAG,gCAAH,EAAqC,YAAW;AAC9CF,uBAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAjB;;AAEA,wBAAOF,IAAIK,gBAAJ,EAAP,EAA+BC,EAA/B,CAAkCC,GAAlC,CAAsCL,cAAtC;AACD,KAJD;AAKD,GAND;;AAQAL,WAAS,gCAAT,EAA2C,YAAW;AACpDO,OAAG,2BAAH,EAAgC,YAAW;AACzCF,uBAAiB,EAAjB;;AAEA,wBAAOD,KAAKI,gBAAL,EAAP,EAAgCC,EAAhC,CAAmCC,GAAnC,CAAuCL,cAAvC;AACD,KAJD;AAKD,GAND;;AAQAL,WAAS,UAAT,EAAqB,YAAW;AAC9BO,OAAG,iCAAH,EAAsC,YAAW;AAC/CD,cAAQ,CAAR;AACAD,uBAAiB,CAAjB;;AAEA,wBAAOF,IAAIQ,QAAJ,CAAaL,KAAb,CAAP,EAA4BG,EAA5B,CAA+BG,KAA/B,CAAqCP,cAArC;AACD,KALD;AAMD,GAPD;;AASAL,WAAS,UAAT,EAAqB,YAAW;AAC9BO,OAAG,uCAAH,EAA4C,YAAW;AACrDD,cAAQ,EAAR;AACAD,uBAAiBQ,SAAjB;;AAEA,wBAAOV,IAAIQ,QAAJ,CAAaL,KAAb,CAAP,EAA4BG,EAA5B,CAA+BG,KAA/B,CAAqCP,cAArC;AACD,KALD;AAMD,GAPD;AAQAL,WAAS,QAAT,EAAkB,YAAU;AAC1BO,OAAG,oBAAH,EAAyB,YAAU;AAC/BD,cAAQ,CAAR;AACAD,uBAAiB,IAAjB;AACA,wBAAOF,IAAIW,MAAJ,CAAWR,KAAX,CAAP,EAA0BG,EAA1B,CAA6BG,KAA7B,CAAmCP,cAAnC;AACH,KAJD;AAKD,GAND;;AAQAL,WAAS,QAAT,EAAkB,YAAU;AAC1BO,OAAG,oBAAH,EAAyB,YAAU;AAC/BD,cAAQ,CAAR;AACAD,uBAAiB,KAAjB;AACA,wBAAOF,IAAIW,MAAJ,CAAWR,KAAX,CAAP,EAA0BG,EAA1B,CAA6BG,KAA7B,CAAmCP,cAAnC;AACH,KAJD;AAKD,GAND;;AAQAL,WAAS,gCAAT,EAA2C,YAAW;AACpDO,OAAG,2BAAH,EAAgC,YAAW;AACzCF,uBAAiB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,CAAjB;;AAEA,wBAAOF,IAAIK,gBAAJ,EAAP,EAA+BC,EAA/B,CAAkCC,GAAlC,CAAsCL,cAAtC;AACD,KAJD;AAKD,GAND;AAOD,CAhED","file":"bst_test.js","sourcesContent":["import BinarySearchTree from '../dist/js/BinarySearchTree';\nimport { expect } from 'chai';\n\ndescribe('BinarySearchTree', function() {\n  var treeArray = [3,2,5,1,4];\n  var emptyTree = [];\n  var BST = new BinarySearchTree(treeArray);\n  var BST2 = new BinarySearchTree(emptyTree);\n  var expectedResult = 0;\n  var input = 0;\n\n  describe('inOrderTravelsal', function() {\n    it(\"should return treeArray sorted\", function() {\n      expectedResult = [1,2,3,4,5];\n\n      expect(BST.inOrderTraversal()).to.eql(expectedResult);\n    });\n  });\n\n  describe('inOrderTravelsal in empty tree', function() {\n    it(\"should return empty array\", function() {\n      expectedResult = [];\n\n      expect(BST2.inOrderTraversal()).to.eql(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return a node with key 1', function() {\n      input = 1;\n      expectedResult = 1;\n\n      expect(BST.findNode(input)).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return a node with unknown key', function() {\n      input = 10;\n      expectedResult = undefined;\n\n      expect(BST.findNode(input)).to.equal(expectedResult);\n    });\n  });\n  describe('insert',function(){\n    it('should return true', function(){\n        input = 6;\n        expectedResult = true;\n        expect(BST.insert(input)).to.equal(expectedResult);\n    });\n  });\n\n  describe('insert',function(){\n    it('should return true', function(){\n        input = 6;\n        expectedResult = false;\n        expect(BST.insert(input)).to.equal(expectedResult);\n    });\n  });\n\n  describe('inOrderTravelsal in empty tree', function() {\n    it(\"should return empty array\", function() {\n      expectedResult = [1,2,3,4,5,6];\n\n      expect(BST.inOrderTraversal()).to.eql(expectedResult);\n    });\n  });\n});\n"]}