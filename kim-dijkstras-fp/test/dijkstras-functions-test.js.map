{"version":3,"sources":["../es6-test/dijkstras-functions-test.js"],"names":["createGraph","nodes","edges","describe","it","expected","array","to","equal","graph","eql","path","dist"],"mappings":"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","file":"dijkstras-functions-test.js","sourcesContent":["import { indexOfSmallest, getEdgeWeight, getNeighborEdges, getNeighborNodes, dijkstras } from '../dist/js/dijkstras-functions'\r\nimport { expect } from 'chai'\r\n'use strict'\r\n\r\nfunction createGraph() {\r\n  var nodes = ['node1', 'node2', 'node3', 'node4', 'node5', 'node6'];\r\n  var edges = {\r\n    'node1-node2': 7,\r\n    'node1-node3': 2,\r\n    'node1-node4': 8,\r\n    'node2-node4': 6,\r\n    'node3-node4': 3,\r\n    'node3-node5': 4,\r\n    'node4-node5': 5,\r\n    'node4-node6': 1,\r\n    'node5-node6': 2\r\n  }\r\n\r\n  return {\r\n    'nodes': nodes,\r\n    'edges': edges\r\n  }\r\n}\r\n\r\ndescribe('indexOfSmallest(array)', function() {\r\n  it('should return index of the smallest element in array', function() {\r\n    var expected = 7;\r\n    var array = [7, 4, 8, 9, 2, 3, 14, 1, 6, 11];\r\n\r\n    expect(indexOfSmallest(array)).to.equal(expected);\r\n  });\r\n});\r\n\r\ndescribe('getEdgeWeight(name, edges)', function() {\r\n  it('Should return weight of a given edge', function() {\r\n    var graph = createGraph();\r\n\r\n    expect(getEdgeWeight('node4-node6', graph.edges)).to.equal(1);\r\n    expect(getEdgeWeight('node6-node4', graph.edges)).to.equal(1);\r\n    expect(getEdgeWeight('node1-node1', graph.edges)).to.equal(-1);\r\n  });\r\n});\r\n\r\ndescribe('getNeighborEdges(node, edges)', function() {\r\n  it('should return neighboring edges to node', function() {\r\n    var graph = createGraph();\r\n    var expected = ['node1-node4', 'node1-node3', 'node1-node2'];\r\n\r\n    expect(getNeighborEdges('node1', graph.edges)).to.eql(expected);\r\n  });\r\n});\r\n\r\ndescribe('getNeighborNodes(node, edges)', function() {\r\n  it('should return neighboring nodes to node', function() {\r\n    var graph = createGraph();\r\n    var expected = ['node4', 'node3', 'node2'];\r\n\r\n    expect(getNeighborNodes('node1', graph.edges)).to.eql(expected);\r\n  });\r\n});\r\n\r\ndescribe('dijkstras(nodes, edges, startNode, endNode, neighborNodes)', function() {\r\n  it('to return shortestPath from startNode to endNode', function() {\r\n    var graph = createGraph();\r\n    var expected = {\r\n      path: [ 'node1', 'node3', 'node4' ],\r\n      dist: 6\r\n    }\r\n    expect(dijkstras(graph.nodes, graph.edges, 'node1', 'node6')).to.eql(expected);\r\n\r\n    expected = {\r\n      path: [ 'node2', 'node4', 'node6' ],\r\n      dist: 9\r\n    }\r\n    expect(dijkstras(graph.nodes, graph.edges, 'node2', 'node5')).to.eql(expected);\r\n\r\n    expected = {\r\n      path: [],\r\n      dist: 0\r\n    }\r\n    expect(dijkstras(graph.nodes, graph.edges, 'node1', 'node1')).to.eql(expected);\r\n\r\n    graph = {\r\n      'nodes': [],\r\n      'edges': {}\r\n    }\r\n    expect(dijkstras(graph.nodes, graph.edges, 'node2', 'node5')).to.eql(expected);\r\n  });\r\n});\r\n"]}