{"version":3,"sources":["../../src/js/dijkstras-functions.js"],"names":["dijkstras","nodes","edges","startNode","endNode","path","dist","fillArrayWithElement","length","Infinity","indexOf","graph","distCopy","slice","pathCopy","includes","pathPart","indexOfSmallest","getEdgeWeight","name","reversedName","replace","array","arrayCopy","tmpIndex","size","element","concat"],"mappings":"AAAA;;;;;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiCC,SAAjC,EAA4CC,OAA5C,EAAqDC,IAArD,EAA2DC,IAA3D,EAAiE;AAC/D,MAAI,CAACD,IAAD,IAAS,CAACC,IAAd,EAAoB;AAClB,QAAID,OAAO,EAAX;AACA,QAAIC,OAAOC,qBAAqBN,MAAMO,MAA3B,EAAmCC,QAAnC,CAAX;AACAH,SAAKI,QAAQP,SAAR,CAAL,IAA2B,CAA3B;AACA,WAAOH,UAAUW,KAAV,EAAiBR,SAAjB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA2CC,IAA3C,CAAP;AACD;AACD,MAAIM,WAAWN,KAAKO,KAAL,EAAf;AACA,MAAIC,WAAWT,KAAKQ,KAAL,EAAf;;AAEA,MAAIZ,MAAMO,MAAN,IAAgB,CAAhB,IAAqBP,MAAMc,QAAN,CAAeX,OAAf,CAAzB,EAAkD;AAChD,WAAO;AACL,cAAQ,EADH;AAEL,cAAQ;AAFH,KAAP;AAID,GALD,MAKO;AACL,QAAIY,WAAWhB,UAAUC,MAAMY,KAAN,CAAY,CAAZ,CAAV,EAA0BX,KAA1B,EAAiCD,MAAMY,KAAN,CAAY,CAAZ,EAAeI,gBAAgBX,KAAKO,KAAL,CAAW,CAAX,CAAhB,CAAf,CAAjC,EAAiFT,OAAjF,CAAf;AACA;AACA;AACA;AACA;AACD;AACF;;AAED,SAASc,aAAT,CAAuBC,IAAvB,EAA6BjB,KAA7B,EAAoC;AAClC,MAAIA,MAAMiB,IAAN,CAAJ,EAAiB;AACf,WAAOjB,MAAMiB,IAAN,CAAP;AACD,GAFD,MAEO;AACL,QAAIC,eAAeD,IAAnB;AACA,WAAOjB,MAAMkB,aAAaC,OAAb,CAAqB,aAArB,EAAoC,OAApC,CAAN,CAAP;AACD;AACF;;AAED;AACA,SAASJ,eAAT,CAAyBK,KAAzB,EAAgC;AAC9B,MAAIC,YAAYD,MAAMT,KAAN,EAAhB;;AAEA,MAAIS,MAAMd,MAAN,IAAgB,CAApB,EAAuB;AACrB,WAAO,CAAP;AACD,GAFD,MAEO;AACL,QAAIgB,WAAWP,gBAAgBK,MAAMT,KAAN,CAAY,CAAZ,CAAhB,IAAkC,CAAjD;AACA,QAAIS,MAAM,CAAN,IAAWA,MAAME,QAAN,CAAf,EAAgC;AAC9B,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAOA,QAAP;AACD;AACF;AACF;;AAED,SAASjB,oBAAT,CAA8BkB,IAA9B,EAAoCC,OAApC,EAA6C;AAC3C,MAAID,QAAQ,CAAZ,EAAe;AACb,WAAO,CAAEC,OAAF,CAAP;AACD,GAFD,MAEO;AACL,WAAOnB,qBAAqBkB,OAAO,CAA5B,EAA+BC,OAA/B,EAAwCC,MAAxC,CAA+C,CAAED,OAAF,CAA/C,CAAP;AACD;AACF;;QAGCnB,oB,GAAAA,oB;QACAU,e,GAAAA,e","file":"dijkstras-functions.js","sourcesContent":["'use strict'\n\nfunction dijkstras(nodes, edges, startNode, endNode, path, dist) {\n  if (!path && !dist) {\n    var path = [];\n    var dist = fillArrayWithElement(nodes.length, Infinity);\n    dist[indexOf(startNode)] = 0;\n    return dijkstras(graph, startNode, endNode, path, dist);\n  }\n  var distCopy = dist.slice();\n  var pathCopy = path.slice();\n\n  if (nodes.length <= 1 || nodes.includes(endNode)) {\n    return {\n      'path': [],\n      'dist': 0\n    }\n  } else {\n    var pathPart = dijkstras(nodes.slice(1), edges, nodes.slice(1)[indexOfSmallest(dist.slice(1))], endNode);\n    // return {\n    //   'path': pathPart.path.concat(startNode),\n    //   'dist': pathPart.dist +\n    // }\n  }\n}\n\nfunction getEdgeWeight(name, edges) {\n  if (edges[name]) {\n    return edges[name];\n  } else {\n    var reversedName = name;\n    return edges[reversedName.replace(/(\\w*)-(\\w*)/, '$2-$1')];\n  }\n}\n\n//Returns index of smallest element in array\nfunction indexOfSmallest(array) {\n  var arrayCopy = array.slice();\n\n  if (array.length <= 1) {\n    return 0;\n  } else {\n    var tmpIndex = indexOfSmallest(array.slice(1)) + 1;\n    if (array[0] < array[tmpIndex]) {\n      return 0;\n    } else {\n      return tmpIndex;\n    }\n  }\n}\n\nfunction fillArrayWithElement(size, element) {\n  if (size <= 1) {\n    return [ element ];\n  } else {\n    return fillArrayWithElement(size - 1, element).concat([ element ]);\n  }\n}\n\nexport {\n  fillArrayWithElement,\n  indexOfSmallest\n}\n"]}