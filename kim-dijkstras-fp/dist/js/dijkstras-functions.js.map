{"version":3,"sources":["../../src/js/dijkstras-functions.js"],"names":["dijkstras","nodes","edges","startNode","endNode","neighborNodes","getNeighborNodes","length","newNodes","filter","node","paths","map","neighbor","newNeighborNodes","includes","pathsDists","path","dist","getEdgeWeight","shortestPath","indexOfSmallest","concat","keys","getNeighborEdges","key","replace","Array","isArray","Object","slice","name","array","arrayCopy","tmpIndex","fillArrayWithElement","size","element"],"mappings":"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","file":"dijkstras-functions.js","sourcesContent":["'use strict'\n\nfunction dijkstras(nodes, edges, startNode, endNode, neighborNodes) {\n  if (!neighborNodes) {\n    return dijkstras(nodes, edges, startNode, endNode, getNeighborNodes(startNode, edges));\n  }\n\n  if (nodes.length <= 1 || startNode === endNode || neighborNodes.length <= 0) {\n    //Return empty path and dist 0\n    return {\n      'path': [],\n      'dist': 0\n    }\n  //Else\n  } else {\n    var newNodes = nodes.filter(function(node) {\n      return node !== startNode;\n    });\n\n    var paths = neighborNodes.map(function(neighbor) {\n      var newNeighborNodes = getNeighborNodes(neighbor, edges).filter(function(node) {\n        return node !== startNode && nodes.includes(node);\n      });\n\n      return dijkstras(newNodes, edges, neighbor, endNode, newNeighborNodes);\n    });\n\n    var pathsDists = paths.map(function(path) {\n      if (path.path.length <= 0) {\n        return path.dist + getEdgeWeight(startNode + '-' + endNode, edges);\n      } else {\n        return path.dist + getEdgeWeight(startNode + '-' + path.path[0], edges);\n      }\n    });\n    var shortestPath = paths[indexOfSmallest(pathsDists)];\n\n    return {\n      'path': [ startNode ].concat(shortestPath.path),\n      'dist': pathsDists[indexOfSmallest(pathsDists)] + shortestPath.dist\n    }\n  }\n}\n\nfunction getNeighborNodes(node, edges) {\n  var keys = getNeighborEdges(node, edges);\n\n  return keys.map(function(key) {\n      return key.replace(node, '').replace('-', '');\n    });\n}\n\nfunction getNeighborEdges(node, edges) {\n  if (!Array.isArray(edges)) {\n    var keys = Object.keys(edges);\n  } else {\n    keys = edges.slice();\n  }\n\n  if (keys.length <= 0) {\n    return [];\n  } else {\n    if (keys[0].includes(node)) {\n      return getNeighborEdges(node, keys.slice(1)).concat(keys[0]);\n    } else {\n      return getNeighborEdges(node, keys.slice(1));\n    }\n  }\n}\n\nfunction getEdgeWeight(name, edges) {\n  if (edges[name]) {\n    return edges[name];\n  } else {\n    return edges[name.replace(/(\\w*)-(\\w*)/, '$2-$1')];\n  }\n  return 0;\n}\n\n//Returns index of smallest element in array\nfunction indexOfSmallest(array) {\n  var arrayCopy = array.slice();\n\n  if (array.length <= 1) {\n    return 0;\n  } else {\n    var tmpIndex = indexOfSmallest(array.slice(1)) + 1;\n    if (array[0] < array[tmpIndex]) {\n      return 0;\n    } else {\n      return tmpIndex;\n    }\n  }\n}\n\nfunction fillArrayWithElement(size, element) {\n  if (size <= 1) {\n    return [ element ];\n  } else {\n    return fillArrayWithElement(size - 1, element).concat([ element ]);\n  }\n}\n\nexport {\n  fillArrayWithElement,\n  indexOfSmallest,\n  getNeighborEdges,\n  getNeighborNodes,\n  dijkstras\n}\n"]}