{"version":3,"sources":["../../src/js/dijkstras-functions.js"],"names":["dijkstras","nodes","edges","startNode","endNode","neighborNodes","getNeighborNodes","length","newNodes","filter","node","paths","map","neighbor","newNeighborNodes","includes","pathsDists","path","dist","getEdgeWeight","shortestPath","indexOfSmallest","concat","keys","getNeighborEdges","key","replace","Array","isArray","Object","slice","name","reversedName","array","tmpIndex"],"mappings":"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","file":"dijkstras-functions.js","sourcesContent":["'use strict'\r\n\r\nfunction dijkstras(nodes, edges, startNode, endNode, neighborNodes) {\r\n  if (!neighborNodes) {\r\n    return dijkstras(nodes, edges, startNode, endNode, getNeighborNodes(startNode, edges));\r\n  }\r\n\r\n  if (nodes.length <= 1 || startNode === endNode || neighborNodes.length <= 0) {\r\n    //Return empty path and dist 0\r\n    return {\r\n      'path': [],\r\n      'dist': 0\r\n    }\r\n  } else {\r\n    var newNodes = nodes.filter(function(node) {\r\n      return node !== startNode;\r\n    });\r\n\r\n    var paths = neighborNodes.map(function(neighbor) {\r\n      var newNeighborNodes = getNeighborNodes(neighbor, edges).filter(function(node) {\r\n        return node !== startNode && nodes.includes(node);\r\n      });\r\n\r\n      return dijkstras(newNodes, edges, neighbor, endNode, newNeighborNodes);\r\n    });\r\n\r\n    var pathsDists = paths.map(function(path) {\r\n      if (path.path.length <= 0) {\r\n        return path.dist + getEdgeWeight(startNode + '-' + endNode, edges);\r\n      } else {\r\n        if (path.dist >= 0) {\r\n          return path.dist + getEdgeWeight(startNode + '-' + path.path[0], edges);\r\n        } else {\r\n          return -1;\r\n        }\r\n\r\n      }\r\n    });\r\n    var shortestPath = paths[indexOfSmallest(pathsDists)];\r\n\r\n    return {\r\n      'path': [ startNode ].concat(shortestPath.path),\r\n      'dist': pathsDists[indexOfSmallest(pathsDists)]\r\n    }\r\n  }\r\n}\r\n\r\nfunction getNeighborNodes(node, edges) {\r\n  var keys = getNeighborEdges(node, edges);\r\n\r\n  return keys.map(function(key) {\r\n    return key.replace(node, '').replace('-', '');\r\n  });\r\n}\r\n\r\nfunction getNeighborEdges(node, edges) {\r\n  if (!Array.isArray(edges)) {\r\n    var keys = Object.keys(edges);\r\n  } else {\r\n    keys = edges.slice();\r\n  }\r\n\r\n  if (keys.length <= 0) {\r\n    return [];\r\n  } else {\r\n    if (keys[0].replace(/(\\w*)-(\\w*)/, '$1') === node || keys[0].replace(/(\\w*)-(\\w*)/, '$2') === node) {\r\n      return getNeighborEdges(node, keys.slice(1)).concat(keys[0]);\r\n    } else {\r\n      return getNeighborEdges(node, keys.slice(1));\r\n    }\r\n  }\r\n}\r\n\r\nfunction getEdgeWeight(name, edges) {\r\n  if (edges[name]) {\r\n    return edges[name];\r\n  } else {\r\n    var reversedName = name.replace(/(\\w*)-(\\w*)/, '$2-$1');\r\n    if (edges[reversedName]) {\r\n      return edges[reversedName];\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n}\r\n\r\n//Returns index of smallest element in array\r\nfunction indexOfSmallest(array) {\r\n  if (array.length <= 1) {\r\n    return 0;\r\n  } else {\r\n    var tmpIndex = indexOfSmallest(array.slice(1)) + 1;\r\n    if (array[0] < array[tmpIndex] || array[tmpIndex] < 0) {\r\n      return 0;\r\n    } else {\r\n      return tmpIndex;\r\n    }\r\n  }\r\n}\r\n\r\nexport {\r\n  indexOfSmallest,\r\n  getEdgeWeight,\r\n  getNeighborEdges,\r\n  getNeighborNodes,\r\n  dijkstras\r\n}\r\n"]}