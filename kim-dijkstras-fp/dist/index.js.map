{"version":3,"sources":["../src/index.js"],"names":["size","graph","createGraph","runMeasurements","hrStart","process","hrtime","console","info","inspect","memoryUsage","result","nodes","edges","hrEnd","getRandom","Object","assign","concat","Math","floor","random"],"mappings":";;AAAA;;AACA;;;;;;AACA;;AAEA,IAAIA,OAAO,EAAX;AACA,IAAIC,QAAQC,YAAYF,IAAZ,CAAZ;AACAG,gBAAgBF,KAAhB;;AAEA,SAASE,eAAT,CAAyBF,KAAzB,EAAgC;AAC9B,MAAIG,UAAUC,QAAQC,MAAR,EAAd;AACAC,UAAQC,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAA1B;;AAEA,MAAIC,SAAS,mCAAUV,MAAMW,KAAhB,EAAuBX,MAAMY,KAA7B,EAAoC,OAApC,EAA6C,SAASb,IAAtD,CAAb;;AAEAO,UAAQC,IAAR,CAAa,WAAW,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAAxB;AACA,MAAII,QAAQT,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAG,UAAQC,IAAR,CAAaM,MAAM,CAAN,IAAW,QAAX,GAAsBA,MAAM,CAAN,IAAW,OAAjC,GAA2C,IAAxD;AACD;;AAED,SAASZ,WAAT,CAAqBF,IAArB,EAA2B;AAAG,MAAIA,SAAS,CAAb,EAAgB;AAC1C,WAAO;AACL,eAAS,EADJ;AAEL,eAAS;AAFJ,KAAP;AAID,GAL2B,MAKrB,IAAIA,SAAS,CAAb,EAAgB;AACrB,WAAO;AACL,eAAS,CAAE,SAASA,IAAX,CADJ;AAEL,eAAS;AAFJ,KAAP;AAID,GALM,MAKA,IAAIA,SAAS,CAAb,EAAgB;AACrB,WAAO;AACL,eAAS,CAAC,OAAD,EAAU,OAAV,CADJ;AAEL,eAAS;AACT,uBAAee;AADN;AAFJ,KAAP;AAMD,GAPM,MAOA;AACL,QAAId,QAAQC,YAAYF,OAAO,CAAnB,CAAZ;AACA,QAAIa,QAAQG,OAAOC,MAAP,CAAc,EAAd,EAAkBhB,MAAMY,KAAxB,CAAZ;AACAA,UAAM,SAASb,IAAT,GAAgB,OAAhB,IAA2BA,OAAO,CAAlC,CAAN,IAA8Ce,WAA9C;AACAF,UAAM,SAASb,IAAT,GAAgB,OAAhB,IAA2BA,OAAO,CAAlC,CAAN,IAA8Ce,WAA9C;AACA,WAAO;AACL,eAASd,MAAMW,KAAN,CAAYM,MAAZ,CAAmB,CAAC,SAASlB,IAAV,CAAnB,CADJ;AAEL,eAASa;AAFJ,KAAP;AAID;AACF;;AAED,SAASE,SAAT,GAAqB;AACnB,SAAOI,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,GAAjB,GAAwB,CAAnC,CAAP;AACD","file":"index.js","sourcesContent":["import { dijkstras, getNeighborEdges, getNeighborNodes } from './js/dijkstras-functions'\nimport util from 'util';\n'use strict';\n\nvar size = 15;\nvar graph = createGraph(size);\nrunMeasurements(graph)\n\nfunction runMeasurements(graph) {\n  var hrStart = process.hrtime();\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\n\n  var result = dijkstras(graph.nodes, graph.edges, 'node1', 'node' + size);\n\n  console.info('end:\\n' + util.inspect(process.memoryUsage()));\n  let hrEnd = process.hrtime(hrStart);\n  console.info(hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\n}\n\nfunction createGraph(size) {  if (size === 0) {\n    return {\n      'nodes': [],\n      'edges': {}\n    }\n  } else if (size === 1) {\n    return {\n      'nodes': [ 'node' + size ],\n      'edges': {}\n    }\n  } else if (size === 2) {\n    return {\n      'nodes': ['node1', 'node2'],\n      'edges': {\n      'node1-node2': getRandom()\n      }\n    }\n  } else {\n    var graph = createGraph(size - 1);\n    var edges = Object.assign({}, graph.edges);\n    edges['node' + size + '-node' + (size - 1)] = getRandom();\n    edges['node' + size + '-node' + (size - 2)] = getRandom();\n    return {\n      'nodes': graph.nodes.concat(['node' + size]),\n      'edges': edges\n    }\n  }\n}\n\nfunction getRandom() {\n  return Math.floor((Math.random() * 100) + 1);\n}\n"]}