{"version":3,"sources":["../src/index.js"],"names":["console","log","size","graph","createGraph","runMeasurements","global","gc","hrStart","process","hrtime","memStart","memoryUsage","rss","info","inspect","result","nodes","edges","memEnd","hrEnd","getRandom","Object","assign","concat","Math","floor","random"],"mappings":";;AAAA;;AACA;;;;;;AACA;;AAEAA,QAAQC,GAAR,CAAY,cAAZ;AACA,IAAIC,OAAO,EAAX;AACAF,QAAQC,GAAR,CAAY,gBAAgBC,IAA5B;AACA,IAAIC,QAAQC,YAAYF,IAAZ,CAAZ;AACAG,gBAAgBF,KAAhB,EAAuBD,IAAvB;AACAI,OAAOC,EAAP;;AAEA,SAASF,eAAT,CAAyBF,KAAzB,EAAgCD,IAAhC,EAAsC;AACpC,MAAIM,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,GAArC;AACAb,UAAQc,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA1B;AACA,MAAII,SAAS,mCAAUb,MAAMc,KAAhB,EAAuBd,MAAMe,KAA7B,EAAoC,OAApC,EAA6C,SAAShB,IAAtD,CAAb;;AAEAF,UAAQc,IAAR,CAAa,WAAW,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAAxB;AACA,MAAIO,SAASV,QAAQG,WAAR,GAAsBC,GAAnC;AACA,MAAIO,QAAQX,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAR,UAAQc,IAAR,CAAa,cAAcM,MAAM,CAAN,CAAd,GAAyB,QAAzB,GAAoCA,MAAM,CAAN,IAAW,OAA/C,GAAyD,IAAtE;AACApB,UAAQc,IAAR,CAAa,cAAcK,SAASR,QAAvB,CAAb;AACD;;AAED,SAASP,WAAT,CAAqBF,IAArB,EAA2B;AACzB,MAAIA,SAAS,CAAb,EAAgB;AACd,WAAO;AACL,eAAS,EADJ;AAEL,eAAS;AAFJ,KAAP;AAID,GALD,MAKO,IAAIA,SAAS,CAAb,EAAgB;AACrB,WAAO;AACL,eAAS,CAAE,SAASA,IAAX,CADJ;AAEL,eAAS;AAFJ,KAAP;AAID,GALM,MAKA,IAAIA,SAAS,CAAb,EAAgB;AACrB,WAAO;AACL,eAAS,CAAC,OAAD,EAAU,OAAV,CADJ;AAEL,eAAS;AACT,uBAAemB;AADN;AAFJ,KAAP;AAMD,GAPM,MAOA;AACL,QAAIlB,QAAQC,YAAYF,OAAO,CAAnB,CAAZ;AACA,QAAIgB,QAAQI,OAAOC,MAAP,CAAc,EAAd,EAAkBpB,MAAMe,KAAxB,CAAZ;AACAA,UAAM,SAAShB,IAAT,GAAgB,OAAhB,IAA2BA,OAAO,CAAlC,CAAN,IAA8CmB,WAA9C;AACAH,UAAM,SAAShB,IAAT,GAAgB,OAAhB,IAA2BA,OAAO,CAAlC,CAAN,IAA8CmB,WAA9C;AACA,WAAO;AACL,eAASlB,MAAMc,KAAN,CAAYO,MAAZ,CAAmB,CAAC,SAAStB,IAAV,CAAnB,CADJ;AAEL,eAASgB;AAFJ,KAAP;AAID;AACF;;AAED,SAASG,SAAT,GAAqB;AACnB,SAAOI,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,GAAjB,GAAwB,CAAnC,CAAP;AACD","file":"index.js","sourcesContent":["import { dijkstras, getNeighborEdges, getNeighborNodes } from './js/dijkstras-functions'\r\nimport util from 'util';\r\n'use strict';\r\n\r\nconsole.log('Dijkstras FP');\r\nlet size = 15;\r\nconsole.log(\"Data size: \" + size);\r\nlet graph = createGraph(size);\r\nrunMeasurements(graph, size);\r\nglobal.gc();\r\n\r\nfunction runMeasurements(graph, size) {\r\n  let hrStart = process.hrtime();\r\n  let memStart = process.memoryUsage().rss;\r\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\r\n  let result = dijkstras(graph.nodes, graph.edges, 'node1', 'node' + size);\r\n\r\n  console.info('end:\\n' + util.inspect(process.memoryUsage()));\r\n  let memEnd = process.memoryUsage().rss;\r\n  let hrEnd = process.hrtime(hrStart);\r\n  console.info('Runtime: ' + hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\r\n  console.info('Memory: ' + (memEnd - memStart));\r\n}\r\n\r\nfunction createGraph(size) {\r\n  if (size === 0) {\r\n    return {\r\n      'nodes': [],\r\n      'edges': {}\r\n    }\r\n  } else if (size === 1) {\r\n    return {\r\n      'nodes': [ 'node' + size ],\r\n      'edges': {}\r\n    }\r\n  } else if (size === 2) {\r\n    return {\r\n      'nodes': ['node1', 'node2'],\r\n      'edges': {\r\n      'node1-node2': getRandom()\r\n      }\r\n    }\r\n  } else {\r\n    let graph = createGraph(size - 1);\r\n    let edges = Object.assign({}, graph.edges);\r\n    edges['node' + size + '-node' + (size - 1)] = getRandom();\r\n    edges['node' + size + '-node' + (size - 2)] = getRandom();\r\n    return {\r\n      'nodes': graph.nodes.concat(['node' + size]),\r\n      'edges': edges\r\n    }\r\n  }\r\n}\r\n\r\nfunction getRandom() {\r\n  return Math.floor((Math.random() * 100) + 1);\r\n}\r\n"]}