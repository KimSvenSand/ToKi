{"version":3,"sources":["../es6-test/binary-search-tree-test.js"],"names":["describe","initiateTree","mTree","insert","it","getRoot","getRightTree","getComparable","to","equal","getParent","getLeftTree","getSize","findNode","emptyTree","expectedArray","inOrderTraversal","eql"],"mappings":"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","file":"binary-search-tree-test.js","sourcesContent":["import BinarySearchTree from '../dist/js/BinarySearchTree';\r\nimport { expect } from 'chai';\r\n\r\ndescribe('BinarySearchTree', function() {\r\n  function initiateTree(mTree) {\r\n    mTree.insert(6);\r\n    mTree.insert(20);\r\n    mTree.insert(2);\r\n    mTree.insert(9);\r\n    mTree.insert(16);\r\n    mTree.insert(24);\r\n    mTree.insert(32);\r\n    mTree.insert(3);\r\n    mTree.insert(7);\r\n  }\r\n\r\n  describe('When initiated', function() {\r\n    it('Tree should have correct structure', function() {\r\n      var mTree = new BinarySearchTree(13);\r\n      initiateTree(mTree);\r\n\r\n      expect(mTree.getRoot().getRightTree().getComparable()).to.equal(20);\r\n      expect(mTree.getRoot().getRightTree().getParent()).to.equal(mTree.getRoot());\r\n      expect(mTree.getRoot().getLeftTree().getComparable()).to.equal(6);\r\n      expect(mTree.getRoot().getLeftTree().getParent()).to.equal(mTree.getRoot());\r\n      expect(mTree.getRoot().getLeftTree().getLeftTree().getComparable()).to.equal(2);\r\n      expect(mTree.getRoot().getLeftTree().getLeftTree().getParent()).to.equal(mTree.getRoot().getLeftTree());\r\n      expect(mTree.getRoot().getLeftTree().getRightTree().getComparable()).to.equal(9);\r\n      expect(mTree.getRoot().getLeftTree().getRightTree().getParent()).to.equal(mTree.getRoot().getLeftTree());\r\n      expect(mTree.getRoot().getRightTree().getLeftTree().getComparable()).to.equal(16);\r\n      expect(mTree.getRoot().getRightTree().getLeftTree().getParent()).to.equal(mTree.getRoot().getRightTree());\r\n      expect(mTree.getRoot().getRightTree().getRightTree().getComparable()).to.equal(24);\r\n      expect(mTree.getRoot().getRightTree().getRightTree().getParent()).to.equal(mTree.getRoot().getRightTree());\r\n      expect(mTree.getRoot().getRightTree().getRightTree().getRightTree().getComparable()).to.equal(32);\r\n      expect(mTree.getRoot().getRightTree().getRightTree().getRightTree().getParent()).to.equal(mTree.getRoot().getRightTree().getRightTree());\r\n      expect(mTree.getRoot().getLeftTree().getLeftTree().getRightTree().getComparable()).to.equal(3);\r\n      expect(mTree.getRoot().getLeftTree().getLeftTree().getRightTree().getParent()).to.equal(mTree.getRoot().getLeftTree().getLeftTree());\r\n      expect(mTree.getRoot().getLeftTree().getRightTree().getLeftTree().getComparable()).to.equal(7);\r\n      expect(mTree.getRoot().getLeftTree().getRightTree().getLeftTree().getParent()).to.equal(mTree.getRoot().getLeftTree().getRightTree());\r\n    });\r\n  });\r\n\r\n  describe('Insert(comparable)', function() {\r\n    it('Should insert the correct values and return true or false', function() {\r\n      var mTree = new BinarySearchTree(13);\r\n      initiateTree(mTree);\r\n      expect(mTree.getSize()).to.equal(10);\r\n      expect(mTree.insert(9)).to.equal(false);\r\n\r\n      mTree.insert(8);\r\n      expect(mTree.getRoot().getLeftTree().getRightTree().getLeftTree().getRightTree().getComparable()).to.equal(8);\r\n      expect(mTree.getRoot().getLeftTree().getRightTree().getLeftTree().getRightTree().getParent()).to.equal(mTree.getRoot().getLeftTree().getRightTree().getLeftTree());\r\n      mTree.insert(1);\r\n      expect(mTree.getRoot().getLeftTree().getLeftTree().getLeftTree().getComparable()).to.equal(1);\r\n      expect(mTree.getRoot().getLeftTree().getLeftTree().getLeftTree().getParent()).to.equal(mTree.getRoot().getLeftTree().getLeftTree());\r\n      mTree.insert(33);\r\n      expect(mTree.getRoot().getRightTree().getRightTree().getRightTree().getRightTree().getComparable()).to.equal(33);\r\n      expect(mTree.getRoot().getRightTree().getRightTree().getRightTree().getRightTree().getParent()).to.equal(mTree.getRoot().getRightTree().getRightTree().getRightTree());\r\n    });\r\n  });\r\n\r\n  describe('findNode(comparable)', function() {\r\n    it('should return node containing comparable. If comparable does not exists it should return null', function() {\r\n      var mTree = new BinarySearchTree(13);\r\n      initiateTree(mTree);\r\n\r\n      expect(mTree.findNode(5)).to.equal(null);\r\n      expect(mTree.findNode(13)).to.equal(mTree.getRoot());\r\n      expect(mTree.findNode(2)).to.equal(mTree.getRoot().getLeftTree().getLeftTree());\r\n      expect(mTree.findNode(32)).to.equal(mTree.getRoot().getRightTree().getRightTree().getRightTree());\r\n      expect(mTree.findNode(20)).to.equal(mTree.getRoot().getRightTree());\r\n    });\r\n  });\r\n\r\n  describe('inOrderTraversal()', function() {\r\n    it('should return the correct array', function() {\r\n      var mTree = new BinarySearchTree(13);\r\n      initiateTree(mTree);\r\n\r\n      var emptyTree = new BinarySearchTree(null);\r\n      var expectedArray = [2, 3, 6, 7, 9, 13, 16, 20, 24, 32];\r\n\r\n      expect(emptyTree.inOrderTraversal()).to.eql([]);\r\n      expect(mTree.inOrderTraversal()).to.eql(expectedArray);\r\n    });\r\n  });\r\n});\r\n"]}