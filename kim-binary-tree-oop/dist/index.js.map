{"version":3,"sources":["../src/index.js"],"names":["size","runMeasurements","hrStart","process","hrtime","console","info","inspect","memoryUsage","mTree","initiateTree","inOrderTraversal","hrEnd","nrOfElements","mRandom","Math","floor","random","tree","getSize","insert"],"mappings":";;AAAA;;;;AACA;;;;;;AACA;;AAEA,IAAIA,OAAO,GAAX;;AAEAC,gBAAgBD,IAAhB;;AAEA,SAASC,eAAT,CAAyBD,IAAzB,EAA+B;AAC7B,MAAIE,UAAUC,QAAQC,MAAR,EAAd;AACAC,UAAQC,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAA1B;AACA,MAAIC,QAAQC,aAAaV,IAAb,CAAZ;AACAK,UAAQC,IAAR,CAAa,oBAAoB,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAAjC;AACAC,QAAME,gBAAN;AACAN,UAAQC,IAAR,CAAa,WAAW,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAAxB;AACA,MAAII,QAAQT,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAG,UAAQC,IAAR,CAAaM,MAAM,CAAN,IAAW,QAAX,GAAsBA,MAAM,CAAN,IAAW,OAAjC,GAA2C,IAAxD;AACD;;AAED,SAASF,YAAT,CAAsBG,YAAtB,EAAoC;AAClC,MAAIC,UAAU,YAAW;AACvB,WAAOC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBJ,YAAhB,GAA+B,CAAhC,GAAqC,CAAhD,CAAP;AACD,GAFD;AAGA,MAAIK,OAAO,+BAAqBJ,SAArB,CAAX;;AAEA,SAAOI,KAAKC,OAAL,KAAiBN,YAAxB,EAAsC;AACpCK,SAAKE,MAAL,CAAYN,SAAZ;AACD;;AAED,SAAOI,IAAP;AACD","file":"index.js","sourcesContent":["import util from 'util';\nimport BinarySearchTree from './js/BinarySearchTree'\n'use strict';\n\nvar size = 100;\n\nrunMeasurements(size);\n\nfunction runMeasurements(size) {\n  var hrStart = process.hrtime();\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\n  var mTree = initiateTree(size);\n  console.info('after insert:\\n' + util.inspect(process.memoryUsage()));\n  mTree.inOrderTraversal();\n  console.info('end:\\n' + util.inspect(process.memoryUsage()));\n  let hrEnd = process.hrtime(hrStart);\n  console.info(hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\n}\n\nfunction initiateTree(nrOfElements) {\n  var mRandom = function() {\n    return Math.floor((Math.random() * nrOfElements * 2) + 1);\n  }\n  var tree = new BinarySearchTree(mRandom());\n\n  while (tree.getSize() < nrOfElements) {\n    tree.insert(mRandom());\n  }\n\n  return tree;\n}\n"]}