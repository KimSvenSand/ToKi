{"version":3,"sources":["../src/index.js"],"names":["console","log","size","runMeasurements","global","gc","hrStart","process","hrtime","startMem","memoryUsage","rss","info","inspect","mTree","Math","floor","random","initiateRandomTree","inOrderTraversal","findNode","endMem","hrEnd"],"mappings":";;AAAA;;;;AACA;;;;;;AACA;;AAEAA,QAAQC,GAAR,CAAY,4BAAZ;AACA,IAAIC,OAAO,KAAX;AACAF,QAAQC,GAAR,CAAY,gBAAgBC,IAA5B;;AAEAC,gBAAgBD,IAAhB;AACAE,OAAOC,EAAP;;AAEA,SAASF,eAAT,CAAyBD,IAAzB,EAA+B;AAC7B,MAAII,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,GAArC;AACAX,UAAQY,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA1B;AACA,MAAII,QAAQ,+BAAqBC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBf,IAAhB,GAAuB,EAAxB,GAA8B,CAAzC,CAArB,CAAZ;AACAY,QAAMI,kBAAN,CAAyBhB,IAAzB;AACAF,UAAQY,IAAR,CAAa,oBAAoB,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAAjC;AACAI,QAAMK,gBAAN;AACAnB,UAAQY,IAAR,CAAa,8BAA8B,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA3C;AACAI,QAAMM,QAAN,CAAgBL,KAAKE,MAAL,KAAgBf,IAAhB,GAAuB,CAAxB,GAA6B,CAA5C;AACAY,QAAMM,QAAN,CAAgBL,KAAKE,MAAL,KAAgBf,IAAhB,GAAuB,CAAxB,GAA6B,CAA5C;AACAY,QAAMM,QAAN,CAAgBL,KAAKE,MAAL,KAAgBf,IAAhB,GAAuB,CAAxB,GAA6B,CAA5C;AACA,MAAImB,SAASd,QAAQG,WAAR,GAAsBC,GAAnC;AACAX,UAAQY,IAAR,CAAa,gCAAgC,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA7C;;AAEA,MAAIY,QAAQf,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAN,UAAQY,IAAR,CAAa,cAAcU,MAAM,CAAN,CAAd,GAAyB,QAAzB,GAAoCA,MAAM,CAAN,IAAW,OAA/C,GAAyD,IAAtE;AACAtB,UAAQY,IAAR,CAAa,cAAcS,SAASZ,QAAvB,CAAb;AACD","file":"index.js","sourcesContent":["import util from 'util';\r\nimport BinarySearchTree from './js/BinarySearchTree'\r\n'use strict';\r\n\r\nconsole.log('Search tree algorithms OOP');\r\nvar size = 10000;\r\nconsole.log(\"Data size: \" + size);\r\n\r\nrunMeasurements(size);\r\nglobal.gc();\r\n\r\nfunction runMeasurements(size) {\r\n  var hrStart = process.hrtime();\r\n  var startMem = process.memoryUsage().rss;\r\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\r\n  var mTree = new BinarySearchTree(Math.floor((Math.random() * size * 10) + 1));\r\n  mTree.initiateRandomTree(size);\r\n  console.info('after insert:\\n' + util.inspect(process.memoryUsage()));\r\n  mTree.inOrderTraversal();\r\n  console.info('after inOrderTraversal:\\n' + util.inspect(process.memoryUsage()));\r\n  mTree.findNode((Math.random() * size * 2) + 1);\r\n  mTree.findNode((Math.random() * size * 2) + 1);\r\n  mTree.findNode((Math.random() * size * 2) + 1);\r\n  var endMem = process.memoryUsage().rss;\r\n  console.info('after 3x random findNode:\\n' + util.inspect(process.memoryUsage()));\r\n\r\n  let hrEnd = process.hrtime(hrStart);\r\n  console.info('Runtime: ' + hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\r\n  console.info('Memory: ' + (endMem - startMem));\r\n}\r\n"]}