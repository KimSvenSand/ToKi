{"version":3,"sources":["../src/index.js"],"names":["size","hrStart","process","hrtime","console","info","inspect","memoryUsage","runMeasurements","hrEnd","mTree","initiateTree","inOrderTraversal","nrOfElements","mRandom","Math","floor","random","tree","getSize","insert"],"mappings":";;AAAA;;;;AACA;;;;;;AACA;;AAEA,IAAIA,OAAO,GAAX;;AAEA,IAAIC,UAAUC,QAAQC,MAAR,EAAd;AACAC,QAAQC,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAA1B;AACAC,gBAAgB,CAAhB,EAAmB,CAAnB;AACAJ,QAAQC,IAAR,CAAa,WAAW,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAAxB;AACA,IAAIE,QAAQP,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAG,QAAQC,IAAR,CAAaI,MAAM,CAAN,IAAW,OAAX,GAAqB,IAAlC;;AAEA,SAASD,eAAT,CAAyBR,IAAzB,EAA+B;AAC7B,MAAIU,QAAQC,aAAaX,IAAb,CAAZ;;AAEAI,UAAQC,IAAR,CAAa,oBAAoB,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAAjC;AACAG,QAAME,gBAAN;AACAR,UAAQC,IAAR,CAAa,uBAAuB,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAApC;AACD;;AAED,SAASI,YAAT,CAAsBE,YAAtB,EAAoC;AAClC,MAAIC,UAAU,YAAW;AACvB,WAAOC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBJ,YAAhB,GAA+B,CAAhC,GAAqC,CAAhD,CAAP;AACD,GAFD;AAGA,MAAIK,OAAO,+BAAqBJ,SAArB,CAAX;;AAEA,SAAOI,KAAKC,OAAL,KAAiBN,YAAxB,EAAsC;AACpCK,SAAKE,MAAL,CAAYN,SAAZ;AACD;;AAED,SAAOI,IAAP;AACD","file":"index.js","sourcesContent":["import util from 'util';\nimport BinarySearchTree from './js/BinarySearchTree'\n'use strict';\n\nvar size = 100;\n\nvar hrStart = process.hrtime();\nconsole.info('start:\\n' + util.inspect(process.memoryUsage()));\nrunMeasurements(5, 8);\nconsole.info('end:\\n' + util.inspect(process.memoryUsage()));\nlet hrEnd = process.hrtime(hrStart);\nconsole.info(hrEnd[1] / 1000000 + 'ms');\n\nfunction runMeasurements(size) {\n  var mTree = initiateTree(size);\n\n  console.info('after insert:\\n' + util.inspect(process.memoryUsage()));\n  mTree.inOrderTraversal();\n  console.info('after traversal:\\n' + util.inspect(process.memoryUsage()));\n}\n\nfunction initiateTree(nrOfElements) {\n  var mRandom = function() {\n    return Math.floor((Math.random() * nrOfElements * 2) + 1);\n  }\n  var tree = new BinarySearchTree(mRandom());\n\n  while (tree.getSize() < nrOfElements) {\n    tree.insert(mRandom());\n  }\n\n  return tree;\n}\n"]}