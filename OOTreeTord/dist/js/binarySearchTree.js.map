{"version":3,"sources":["../../src/js/binarySearchTree.js"],"names":["BinarySearchTree","constructor","tree","root","_BinaryNode","i","length","node","undefined","key","leftNode","rightNode","findNode","insert","returnValue"],"mappings":"AAAA;;;;;AAEe,MAAMA,gBAAN,CAAuB;AACpCC,cAAYC,IAAZ,EAAkB;AAChB,SAAKC,IAAL,GAAY,IAAIC,WAAJ,CAAgBF,KAAK,CAAL,CAAhB,CAAZ;AACA,SAAI,IAAIG,IAAG,CAAX,EAAcA,IAAIH,KAAKI,MAAvB,EAA+BD,GAA/B,EAAmC;AACjC,UAAIE,OAAO,KAAKJ,IAAhB;AACA,aAAMI,QAAQC,SAAd,EAAwB;AACtB,YAAGN,KAAKG,CAAL,IAAUE,KAAKE,GAAlB,EAAsB;AACpB,cAAGF,KAAKG,QAAL,IAAiBF,SAApB,EAA8B;AAC5BD,iBAAKG,QAAL,GAAgB,IAAIN,WAAJ,CAAgBF,KAAKG,CAAL,CAAhB,CAAhB;AACAE,mBAAOC,SAAP;AACD,WAHD,MAGK;AACHD,mBAAOA,KAAKG,QAAZ;AACD;AACF,SAPD,MAOK;AACH,cAAGH,KAAKI,SAAL,IAAkBH,SAArB,EAA+B;AAC7BD,iBAAKI,SAAL,GAAiB,IAAIP,WAAJ,CAAgBF,KAAKG,CAAL,CAAhB,CAAjB;AACAE,mBAAOC,SAAP;AACD,WAHD,MAGK;AACHD,mBAAOA,KAAKI,SAAZ;AACD;AACF;AACF;AACF;AACF;;AAEDC,WAASH,GAAT,EAAa;AACX,QAAIF,OAAO,KAAKJ,IAAhB;AACA,WAAMM,OAAOF,KAAKE,GAAZ,IAAmBF,QAAQC,SAAjC,EAA2C;AACzC,UAAGC,MAAMF,KAAKE,GAAd,EAAkB;AAChBF,eAAOA,KAAKG,QAAZ;AACD,OAFD,MAEM,IAAGD,MAAMF,KAAKE,GAAd,EAAkB;AACtBF,eAAOA,KAAKI,SAAZ;AACD;AACF;;AAED,WAAOJ,IAAP;AACD;;AAED;;;;;;;;;;;;;;;;;AAiBAM,SAAOJ,GAAP,EAAW;AACT,QAAIF,OAAO,KAAKJ,IAAhB;AACA,QAAIW,cAAc,KAAlB;AACA,WAAML,OAAOF,KAAKE,GAAZ,IAAmBF,QAAQC,SAAjC,EAA2C;AACzC,UAAGC,MAAMF,KAAKE,GAAd,EAAkB;AAChB,YAAGF,KAAKG,QAAL,KAAkBF,SAArB,EAA+B;AAC7BD,eAAKG,QAAL,GAAgB,IAAIN,WAAJ,CAAgBK,GAAhB,CAAhB;AACAF,iBAAOC,SAAP;AACAM,wBAAc,IAAd;AACD,SAJD,MAIK;AACHP,iBAAOA,KAAKG,QAAZ;AACD;AACF,OARD,MAQM,IAAGD,MAAMF,KAAKE,GAAd,EAAkB;AACtB,YAAGF,KAAKI,SAAL,KAAmBH,SAAtB,EAAgC;AAC9BD,eAAKI,SAAL,GAAiB,IAAIP,WAAJ,CAAgBK,GAAhB,CAAjB;AACAF,iBAAOC,SAAP;AACAM,wBAAc,IAAd;AACD;AACDP,eAAOA,KAAKI,SAAZ;AACD;AACF;AACD,WAAOG,WAAP;AACD;AA7EmC;;kBAAjBd,gB;AAgFrB,MAAMI,WAAN,CAAiB;AACfH,cAAYQ,GAAZ,EAAgB;AACd,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACD;AALc","file":"binarySearchTree.js","sourcesContent":["'use strict';\r\n\r\nexport default class BinarySearchTree {\r\n  constructor(tree) {\r\n    this.root = new _BinaryNode(tree[0]);\r\n    for(var i =1; i < tree.length; i++){\r\n      var node = this.root;\r\n      while(node != undefined){\r\n        if(tree[i] < node.key){\r\n          if(node.leftNode == undefined){\r\n            node.leftNode = new _BinaryNode(tree[i]);\r\n            node = undefined;\r\n          }else{\r\n            node = node.leftNode;\r\n          }\r\n        }else{\r\n          if(node.rightNode == undefined){\r\n            node.rightNode = new _BinaryNode(tree[i]);\r\n            node = undefined;\r\n          }else{\r\n            node = node.rightNode;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  findNode(key){\r\n    var node = this.root;\r\n    while(key != node.key && node != undefined){\r\n      if(key < node.key){\r\n        node = node.leftNode;\r\n      }else if(key > node.key){\r\n        node = node.rightNode;\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /*inOrderTraversal(){\r\n    var array = [];\r\n    var node = this.root;\r\n    while(node != \" \"){\r\n      if(node.leftNode != null && array.indexOf(node.leftNode.key) == -1 ){\r\n        node = node.leftNode;\r\n      }else if(node.leftNode == null && array.indexOf(node.key) == -1){\r\n        array.push(node.key);\r\n      }else if(node.rightNode != null && array.indexOf(node.rightNode.key) == -1){\r\n        node = node.rightNode;\r\n      }else{\r\n        node = node.parent;\r\n      }\r\n    }\r\n    return array;\r\n  }*/\r\n\r\n  insert(key){\r\n    var node = this.root;\r\n    var returnValue = false;\r\n    while(key != node.key && node != undefined){\r\n      if(key < node.key){\r\n        if(node.leftNode === undefined){\r\n          node.leftNode = new _BinaryNode(key);\r\n          node = undefined;\r\n          returnValue = true;\r\n        }else{\r\n          node = node.leftNode;\r\n        }\r\n      }else if(key > node.key){\r\n        if(node.rightNode === undefined){\r\n          node.rightNode = new _BinaryNode(key);\r\n          node = undefined;\r\n          returnValue = true;\r\n        }\r\n        node = node.rightNode;\r\n      }\r\n    }\r\n    return returnValue;\r\n  }\r\n}\r\n\r\nclass _BinaryNode{\r\n  constructor(key){\r\n    this.key = key;\r\n    this.leftNode = null;\r\n    this.rightNode = null;\r\n  }\r\n}\r\n"]}