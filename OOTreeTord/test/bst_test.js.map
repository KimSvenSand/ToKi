{"version":3,"sources":["../es6-test/bst_test.js"],"names":["describe","treeArray","BST","expectedResult","input","console","log","it","insert","to","equal"],"mappings":";;AAAA;;;;AACA;;;;AAEAA,SAAS,kBAAT,EAA6B,YAAW;AACtC,MAAIC,YAAY,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,CAAhB;AACA,MAAIC,MAAM,+BAAqBD,SAArB,CAAV;AACA,MAAIE,iBAAiB,CAArB;AACA,MAAIC,QAAQ,CAAZ;AACAC,UAAQC,GAAR,CAAYJ,GAAZ;;AAEA;;;;;;;AAQA;;;;;;;;AASAF,WAAS,QAAT,EAAkB,YAAU;AAC1BO,OAAG,oBAAH,EAAyB,YAAU;AAC/BH,cAAQ,CAAR;AACAD,uBAAiB,IAAjB;AACA,wBAAOD,IAAIM,MAAJ,CAAWJ,KAAX,CAAP,EAA0BK,EAA1B,CAA6BC,KAA7B,CAAmCP,cAAnC;AACH,KAJD;AAKD,GAND;AAOD,CA/BD","file":"bst_test.js","sourcesContent":["import BinarySearchTree from '../dist/js/binarySearchTree';\r\nimport { expect } from 'chai';\r\n\r\ndescribe('BinarySearchTree', function() {\r\n  var treeArray = [3,2,5,1,4];\r\n  var BST = new BinarySearchTree(treeArray);\r\n  var expectedResult = 0;\r\n  var input = 0;\r\n  console.log(BST);\r\n\r\n  /*describe('inOrderTravelsal', function() {\r\n    it(\"should return treeArray sorted\", function() {\r\n      expectedResult = [1,2,3,4,5];\r\n\r\n      expect(BST.inOrderTraversal()).to.equal(expectedResult);\r\n    });\r\n  });*/\r\n\r\n  /*describe('findNode', function() {\r\n    it('should return a node with key 1', function() {\r\n      input = 1;\r\n      expectedResult = new BinarySearchTree([1]);\r\n\r\n      expect(BST.findNode(input)).to.equal(expectedResult);\r\n    });\r\n  });*/\r\n\r\n  describe('insert',function(){\r\n    it('should return true', function(){\r\n        input = 6;\r\n        expectedResult = true;\r\n        expect(BST.insert(input)).to.equal(expectedResult);\r\n    });\r\n  });\r\n});\r\n"]}