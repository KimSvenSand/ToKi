{"version":3,"sources":["../../src/js/Shellsort.js"],"names":["getGapSequence","random","shellsort","findBiggestGap","countCurrentGap","placeGap","length","gapSequence","push","Math","pow","array","floor","currentGapIndex","sortedArray","currentValue","currentIndex","currentGap"],"mappings":"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","file":"Shellsort.js","sourcesContent":["'use strict';\n\nexport function getGapSequence(length,gapSequence){\n  if(length >= 0){\n    if(length == 0){\n      gapSequence.push(0);\n    }else{\n      gapSequence = getGapSequence(length - 1,gapSequence);\n    }\n  }\n\n  gapSequence.push(9*(Math.pow(4,length) - Math.pow(2,length)) + 1);\n  gapSequence.push(Math.pow(2,length+2)*(Math.pow(2,length+2)-3)+1);\n\n  return gapSequence;\n}\n\nexport function random(length,array){\n  if(length >= 0){\n    array.push(Math.floor((Math.random()*100)+1));\n    array = random(length-1,array);\n  }\n  return array;\n}\n\nexport function shellsort(array,gapSequence){\n  var currentGapIndex = findBiggestGap(array,gapSequence,0);\n  var sortedArray = countCurrentGap(currentGapIndex,gapSequence,0,0,array);\n  return sortedArray;\n}\n\nexport function findBiggestGap(array, gapSequence, currentGapIndex){\n  if(gapSequence[currentGapIndex] > array.length/2){\n    currentGapIndex = currentGapIndex-1;\n  }else if(gapSequence[currentGapIndex] < array.length/2){\n    currentGapIndex = findBiggestGap(array,gapSequence,currentGapIndex+1);\n  }\n  return currentGapIndex;\n}\n\nexport function countCurrentGap(currentGapIndex,gapSequence,currentValue,currentIndex,array){\n  if(gapSequence[currentGapIndex] > 0){\n    array = placeGap(gapSequence[currentGapIndex],0,gapSequence[currentGapIndex],array);\n    countCurrentGap(currentGapIndex-1,gapSequence,currentValue,currentIndex,array);\n  }\n  return array;\n}\n\nexport function placeGap(currentGap,currentValue,currentIndex,array){\n  if(currentIndex < array.length){\n    currentValue = array[currentIndex];\n    while((currentIndex - currentGap) >= 0 && array[currentIndex - currentGap] > currentValue){\n      array[currentIndex] = array[currentIndex - currentGap];\n      currentIndex = currentIndex - currentGap;\n    }\n    //console.log(\"Value: \"+currentValue);\n    array[currentIndex] = currentValue;\n\n    array = placeGap(currentGap,currentValue,currentIndex+1,array);\n  }\n  return array;\n}\n"]}