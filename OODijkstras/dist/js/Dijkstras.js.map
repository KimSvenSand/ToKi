{"version":3,"sources":["../../src/js/Dijkstras.js"],"names":["Dijkstras","constructor","graph","addNodes","nodeArray","addEdges","edgeArray","runDijkstrasAlgorithm","startNode","endNode","findNodeByName","setDist","unvisitedNodes","getUnvisitedNodes","currentNode","findNodeByDist","currentConnection","connectingEdges","length","indexOf","setVisited","getEdges","i","getConnection","undefined","parseInt","getDist","getWeight","getPath","setPath","getName","findVisitedNode"],"mappings":";;;;;;AAAA;;;;;;AACA;;AAEe,MAAMA,SAAN,CAAgB;AAC7BC,gBAAa;AACX,SAAKC,KAAL,GAAa,qBAAb;AACD;;AAEDC,WAASC,SAAT,EAAmB;AACjB,SAAKF,KAAL,CAAWC,QAAX,CAAoBC,SAApB;AACD;;AAEDC,WAASC,SAAT,EAAmB;AACjB,SAAKJ,KAAL,CAAWG,QAAX,CAAoBC,SAApB;AACD;;AAEDC,wBAAsBC,SAAtB,EAAgCC,OAAhC,EAAwC;AACtC,QAAGD,aAAaC,OAAhB,EAAwB;AACtB,WAAKP,KAAL,CAAWQ,cAAX,CAA0BF,SAA1B,EAAqCG,OAArC,CAA6C,CAA7C;AACA,UAAIC,iBAAiB,KAAKV,KAAL,CAAWW,iBAAX,EAArB;AACA,UAAIC,cAAa,KAAKZ,KAAL,CAAWa,cAAX,EAAjB;AACA,UAAIC,oBAAoB,EAAxB;AACA,UAAIC,kBAAkB,EAAtB;AACA,aAAML,eAAeM,MAAf,IAAyB,CAAzB,IAA8BN,eAAeO,OAAf,CAAuBV,OAAvB,KAAmC,CAAC,CAAxE,EAA0E;AACxEK,sBAAc,KAAKZ,KAAL,CAAWa,cAAX,EAAd;;AAEAD,oBAAYM,UAAZ,CAAuB,IAAvB;AACAR,yBAAiB,KAAKV,KAAL,CAAWW,iBAAX,EAAjB;AACAI,0BAAkBH,YAAYO,QAAZ,EAAlB;AACA,aAAI,IAAIC,IAAI,CAAZ,EAAcA,IAAIL,gBAAgBC,MAAlC,EAA0CI,GAA1C,EAA8C;AAC5CN,8BAAoB,KAAKd,KAAL,CAAWQ,cAAX,CAA0BO,gBAAgBK,CAAhB,EAAmBC,aAAnB,EAA1B,CAApB;AACA,cAAGP,qBAAqBQ,SAArB,IAAkCC,SAAST,kBAAkBU,OAAlB,EAAT,IAAwCD,SAASA,SAASX,YAAYY,OAAZ,EAAT,IAAkCD,SAASR,gBAAgBK,CAAhB,EAAmBK,SAAnB,EAAT,CAA3C,CAA7E,EAAkK;AAChKX,8BAAkBL,OAAlB,CAA0Bc,SAASA,SAASX,YAAYY,OAAZ,EAAT,IAAkCD,SAASR,gBAAgBK,CAAhB,EAAmBK,SAAnB,EAAT,CAA3C,CAA1B;AACA,gBAAGb,YAAYc,OAAZ,MAAyB,EAA5B,EAA+B;AAC7BZ,gCAAkBa,OAAlB,CAA0Bf,YAAYgB,OAAZ,EAA1B;AACD,aAFD,MAEK;AACHd,gCAAkBa,OAAlB,CAA0Bf,YAAYc,OAAZ,KAAwB,GAAxB,GAA8Bd,YAAYgB,OAAZ,EAAxD;AACD;AACF;AACF;AACF;AACD,aAAO,KAAK5B,KAAL,CAAW6B,eAAX,CAA2BtB,OAA3B,EAAoCiB,OAApC,EAAP;AAED,KA1BD,MA0BK;AACH,aAAO,CAAP;AACD;AACF;;AA3C4B;kBAAV1B,S","file":"Dijkstras.js","sourcesContent":["import Graph from './graph.js';\r\n'use strict';\r\n\r\nexport default class Dijkstras {\r\n  constructor(){\r\n    this.graph = new Graph();\r\n  }\r\n\r\n  addNodes(nodeArray){\r\n    this.graph.addNodes(nodeArray);\r\n  }\r\n\r\n  addEdges(edgeArray){\r\n    this.graph.addEdges(edgeArray);\r\n  }\r\n\r\n  runDijkstrasAlgorithm(startNode,endNode){\r\n    if(startNode != endNode){\r\n      this.graph.findNodeByName(startNode).setDist(0);\r\n      var unvisitedNodes = this.graph.getUnvisitedNodes();\r\n      var currentNode= this.graph.findNodeByDist();\r\n      var currentConnection = \"\";\r\n      var connectingEdges = \"\";\r\n      while(unvisitedNodes.length != 0 || unvisitedNodes.indexOf(endNode) != -1){\r\n        currentNode = this.graph.findNodeByDist();\r\n\r\n        currentNode.setVisited(true);\r\n        unvisitedNodes = this.graph.getUnvisitedNodes();\r\n        connectingEdges = currentNode.getEdges();\r\n        for(var i = 0;i < connectingEdges.length; i++){\r\n          currentConnection = this.graph.findNodeByName(connectingEdges[i].getConnection());\r\n          if(currentConnection != undefined && parseInt(currentConnection.getDist()) > parseInt(parseInt(currentNode.getDist()) + parseInt(connectingEdges[i].getWeight()))){\r\n            currentConnection.setDist(parseInt(parseInt(currentNode.getDist()) + parseInt(connectingEdges[i].getWeight())));\r\n            if(currentNode.getPath() == \"\"){\r\n              currentConnection.setPath(currentNode.getName());\r\n            }else{\r\n              currentConnection.setPath(currentNode.getPath() + \"-\" + currentNode.getName());\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return this.graph.findVisitedNode(endNode).getDist();\r\n\r\n    }else{\r\n      return 0;\r\n    }\r\n  }\r\n\r\n\r\n}\r\n"]}