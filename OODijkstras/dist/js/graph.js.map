{"version":3,"sources":["../../src/js/graph.js"],"names":["Graph","constructor","nodes","getNodes","findNodeByName","nodeName","i","length","getName","getIfVisited","undefined","findNodeByDist","value","Number","MAX_SAFE_INTEGER","place","getDist","getUnvisitedNodes","unvisitedNodes","push","addNodes","nodeArray","addEdges","edgeArray","currentFromNode","currentToNode","currentEdgeLength","slice","indexOf","addEdge","findVisitedNode"],"mappings":"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","file":"graph.js","sourcesContent":["import Node from './node.js';\r\n'use strict';\r\n\r\nexport default class Graph{\r\n  constructor(){\r\n    this.nodes = [];\r\n  }\r\n\r\n  getNodes(){\r\n    return this.nodes;\r\n  }\r\n\r\n  findNodeByName(nodeName){\r\n    for (var i = 0; i < this.nodes.length; i++) {\r\n      if(this.nodes[i].getName() == nodeName && this.nodes[i].getIfVisited() == false){\r\n        return this.nodes[i];\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  findNodeByDist(){\r\n    var value = Number.MAX_SAFE_INTEGER;\r\n    var place = -1;\r\n    for (var i = 0; i < this.nodes.length; i++) {\r\n      if(value > this.nodes[i].getDist() && this.nodes[i].getIfVisited() == false){\r\n        value = this.nodes[i].getDist();\r\n        place = i;\r\n      }\r\n    }\r\n    return this.nodes[place];\r\n  }\r\n\r\n  getUnvisitedNodes(){\r\n    var unvisitedNodes = [];\r\n    for(var i = 0; i < this.nodes.length; i++){\r\n      if(this.nodes[i].getIfVisited() == false){\r\n        unvisitedNodes.push(this.nodes[i].getName());\r\n      }\r\n    }\r\n    return unvisitedNodes;\r\n  }\r\n\r\n  addNodes(nodeArray){\r\n    for(var i = 0; i < nodeArray.length; i++){\r\n      this.nodes.push(new Node(nodeArray[i]));\r\n    }\r\n  }\r\n\r\n  addEdges(edgeArray){\r\n    var currentFromNode = \"\";\r\n    var currentToNode = \"\";\r\n    var currentEdgeLength = 0;\r\n    for(var i = 0; i < edgeArray.length;i++){\r\n      currentFromNode = edgeArray[i].slice(0,edgeArray[i].indexOf(\"-\"));\r\n      currentToNode = edgeArray[i].slice(edgeArray[i].indexOf(\"-\")+1,edgeArray[i].indexOf(\"=\"));\r\n      currentEdgeLength = edgeArray[i].slice(edgeArray[i].indexOf(\"=\")+1,edgeArray[i].length);\r\n      this.findNodeByName(currentFromNode).addEdge(currentToNode,currentEdgeLength);\r\n      this.findNodeByName(currentToNode).addEdge(currentFromNode,currentEdgeLength);\r\n    }\r\n  }\r\n\r\n  findVisitedNode(nodeName){\r\n    for (var i = 0; i < this.nodes.length; i++) {\r\n      if(this.nodes[i].getName() == nodeName && this.nodes[i].getIfVisited() == true){\r\n        return this.nodes[i];\r\n      }\r\n    }\r\n    return undefined;\r\n  }\r\n}\r\n"]}