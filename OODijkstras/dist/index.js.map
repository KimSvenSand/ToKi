{"version":3,"sources":["../src/index.js"],"names":["console","log","nrOfElements","runDijkstrasAlgorithm","global","gc","hrStart","process","hrtime","memStart","memoryUsage","rss","info","inspect","dijk","nodes","edges","i","push","Math","floor","random","addNodes","addEdges","startNode","endNode","memEnd","hrEnd"],"mappings":";;AAAA;;;;AACA;;;;;;AACA;;AAGAA,QAAQC,GAAR,CAAY,0BAAZ;AACA,IAAIC,eAAe,EAAnB;AACAF,QAAQC,GAAR,CAAY,mBAAkBC,YAA9B;AACAC,sBAAsBD,YAAtB;;AAGAE,OAAOC,EAAP;;AAGA,SAASF,qBAAT,CAA+BD,YAA/B,EAA6C;AAC3C,MAAII,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,GAArC;AACAX,UAAQY,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA1B;;AAEA,MAAII,OAAO,yBAAX;;AAEA,MAAIC,QAAM,EAAV;AACA,MAAIC,QAAM,EAAV;AACA,OAAI,IAAIC,IAAI,CAAZ,EAAeA,KAAKf,YAApB,EAAkCe,GAAlC,EAAsC;AACpCF,UAAMG,IAAN,CAAW,SAAOD,CAAlB;AACA,QAAGA,IAAI,CAAP,EAAS;AACPD,YAAME,IAAN,CAAW,SAAOD,CAAP,GAAS,OAAT,IAAkBA,IAAE,CAApB,IAAuB,GAAvB,GAA2BE,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,EAAjB,GAAuB,CAAlC,CAAtC;AACF,UAAGJ,IAAI,CAAP,EAAS;AACPD,cAAME,IAAN,CAAW,SAAOD,CAAP,GAAS,OAAT,IAAkBA,IAAE,CAApB,IAAuB,GAAvB,GAA2BE,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,EAAjB,GAAuB,CAAlC,CAAtC;AACD;AACA;AACF;AACDP,OAAKQ,QAAL,CAAcP,KAAd;AACAD,OAAKS,QAAL,CAAcP,KAAd;AACA,MAAIQ,YAAY,OAAhB;AACA,MAAIC,UAAU,SAAOvB,YAArB;AACAY,OAAKX,qBAAL,CAA2BqB,SAA3B,EAAqCC,OAArC;;AAGAzB,UAAQY,IAAR,CAAa,WAAW,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAAxB;AACA,MAAIgB,SAASnB,QAAQG,WAAR,GAAsBC,GAAnC;AACA,MAAIgB,QAAQpB,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAN,UAAQY,IAAR,CAAae,MAAM,CAAN,IAAW,QAAX,GAAsBA,MAAM,CAAN,IAAW,OAAjC,GAA2C,IAAxD;AACA3B,UAAQC,GAAR,CAAY,cAAcyB,SAASjB,QAAvB,CAAZ;AACD","file":"index.js","sourcesContent":["import Dijkstras from './js/Dijkstras.js';\nimport util from 'util';\n'use strict';\n\n\nconsole.log(\"OOP Dijkstras algorithm:\");\nvar nrOfElements = 20;\nconsole.log(\"nrOfElements: \"+ nrOfElements);\nrunDijkstrasAlgorithm(nrOfElements);\n\n\nglobal.gc();\n\n\nfunction runDijkstrasAlgorithm(nrOfElements) {\n  var hrStart = process.hrtime();\n  var memStart = process.memoryUsage().rss;\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\n\n  var dijk = new Dijkstras();\n\n  var nodes=[];\n  var edges=[];\n  for(var i = 1; i <= nrOfElements; i++){\n    nodes.push(\"node\"+i);\n    if(i > 1){\n      edges.push(\"node\"+i+\"-node\"+(i-1)+\"=\"+Math.floor((Math.random() * 10) + 1));\n    if(i > 2){\n      edges.push(\"node\"+i+\"-node\"+(i-2)+\"=\"+Math.floor((Math.random() * 10) + 1));\n    }\n    }\n  }\n  dijk.addNodes(nodes);\n  dijk.addEdges(edges);\n  var startNode = \"node1\";\n  var endNode = \"node\"+nrOfElements;\n  dijk.runDijkstrasAlgorithm(startNode,endNode);\n\n\n  console.info('end:\\n' + util.inspect(process.memoryUsage()));\n  var memEnd = process.memoryUsage().rss;\n  let hrEnd = process.hrtime(hrStart);\n  console.info(hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\n  console.log(\"Memory: \" + (memEnd - memStart));\n}\n"]}