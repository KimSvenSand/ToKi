{"version":3,"sources":["../es6-test/bst_test.js"],"names":["describe","dijkstras","expectedResult","it","nodes","addNodes","edges","addEdges","startNode","endNode","runDijkstrasAlgorithm","to","eql"],"mappings":"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","file":"bst_test.js","sourcesContent":["import Dijkstras from '../dist/js/Dijkstras';\nimport { expect } from 'chai';\n\ndescribe('Dijkstras Algrithm', function() {\n  var dijkstras = new Dijkstras();\n  var expectedResult = 0;\n\n  describe('Dijkstras algorithm 1nd test', function() {\n    it(\"Should return the length between Node1 and Node6 which is 6\", function() {\n      expectedResult = 6;\n      var nodes=[\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"];\n      dijkstras.addNodes(nodes);\n      var edges=[\"node1-node2=7\", \"node1-node4=8\", \"node1-node3=2\", \"node2-node4=6\", \"node3-node4=3\", \"node3-node5=4\", \"node4-node6=1\", \"node4-node5=5\", \"node5-node6=2\"];\n      dijkstras.addEdges(edges);\n      var startNode = \"node1\";\n      var endNode = \"node6\";\n\n      expect(dijkstras.runDijkstrasAlgorithm(startNode,endNode)).to.eql(expectedResult);\n    });\n  });\n\n  describe('Dijkstras algorithm 2nd test', function() {\n    it(\"Should return the length between Node1 and Node4 which is 5\", function() {\n      dijkstras = new Dijkstras();\n      expectedResult = 5;\n      var nodes=[\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"];\n      dijkstras.addNodes(nodes);\n      var edges=[\"node1-node2=7\", \"node1-node4=8\", \"node1-node3=2\", \"node2-node4=6\", \"node3-node4=3\", \"node3-node5=4\", \"node4-node6=1\", \"node4-node5=5\", \"node5-node6=2\"];\n      dijkstras.addEdges(edges);\n      var startNode = \"node1\";\n      var endNode = \"node4\";\n\n      expect(dijkstras.runDijkstrasAlgorithm(startNode,endNode)).to.eql(expectedResult);\n    });\n  });\n\n  describe('Dijkstras algorithm 3rd test', function() {\n    it(\"Should return the length between Node2 and Node5 which is 9\", function() {\n      dijkstras = new Dijkstras();\n      expectedResult = 9;\n      var nodes=[\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"];\n      dijkstras.addNodes(nodes);\n      var edges=[\"node1-node2=7\", \"node1-node4=8\", \"node1-node3=2\", \"node2-node4=6\", \"node3-node4=3\", \"node3-node5=4\", \"node4-node6=1\", \"node4-node5=5\", \"node5-node6=2\"];\n      dijkstras.addEdges(edges);\n      var startNode = \"node2\";\n      var endNode = \"node5\";\n\n      expect(dijkstras.runDijkstrasAlgorithm(startNode,endNode)).to.eql(expectedResult);\n    });\n  });\n\n  describe('Dijkstras algorithm 4rd test', function() {\n    it(\"Should return 0 since startNode and endNode is the same\", function() {\n      dijkstras = new Dijkstras();\n      expectedResult = 0;\n      var nodes=[\"node1\", \"node2\", \"node3\", \"node4\", \"node5\", \"node6\"];\n      dijkstras.addNodes(nodes);\n      var edges=[\"node1-node2=7\", \"node1-node4=8\", \"node1-node3=2\", \"node2-node4=6\", \"node3-node4=3\", \"node3-node5=4\", \"node4-node6=1\", \"node4-node5=5\", \"node5-node6=2\"];\n      dijkstras.addEdges(edges);\n      var startNode = \"node1\";\n      var endNode = \"node1\";\n\n      expect(dijkstras.runDijkstrasAlgorithm(startNode,endNode)).to.eql(expectedResult);\n    });\n  });\n\n  describe('Dijkstras algorithm 5rd test', function() {\n    it(\"Should return 0 since there is nothing comming to the function\", function() {\n      dijkstras = new Dijkstras();\n      expectedResult = 0;\n      var nodes=[];\n      var edges=[];\n      var startNode = \"\";\n      var endNode = \"\";\n\n      expect(dijkstras.runDijkstrasAlgorithm(startNode,endNode)).to.eql(expectedResult);\n    });\n  });\n\n});\n"]}