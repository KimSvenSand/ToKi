{"version":3,"sources":["../src/index.js"],"names":["console","log","nrOfElements","runDijkstrasAlgorithm","global","gc","hrStart","process","hrtime","memStart","memoryUsage","rss","info","inspect","nodes","edges","makeGraph","startNode","endNode","memEnd","hrEnd","nodesCopy","slice","edgesCopy","push","Math","floor","random"],"mappings":";;AAAA;;AACA;;;;;;AACA;;AAEAA,QAAQC,GAAR,CAAY,yBAAZ;AACA,IAAIC,eAAe,EAAnB;AACAF,QAAQC,GAAR,CAAY,mBAAkBC,YAA9B;AACAC,sBAAsBD,YAAtB;;AAEAE,OAAOC,EAAP;;AAEA,SAASF,qBAAT,CAA+BD,YAA/B,EAA6C;AAC3C,MAAII,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,GAArC;AACAX,UAAQY,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA1B;AACA,MAAI,CAACI,KAAD,EAAOC,KAAP,IAAgBC,UAAU,EAAV,EAAa,EAAb,EAAgBd,YAAhB,CAApB;AACA,MAAIe,YAAY,OAAhB;AACA,MAAIC,UAAU,SAAOhB,YAArB;AACA,4BAAUY,KAAV,EAAgBC,KAAhB,EAAsBE,SAAtB,EAAgCC,OAAhC;;AAGAlB,UAAQY,IAAR,CAAa,WAAW,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAAxB;AACA,MAAIS,SAASZ,QAAQG,WAAR,GAAsBC,GAAnC;AACA,MAAIS,QAAQb,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAN,UAAQY,IAAR,CAAaQ,MAAM,CAAN,IAAW,QAAX,GAAsBA,MAAM,CAAN,IAAW,OAAjC,GAA2C,IAAxD;AACApB,UAAQC,GAAR,CAAY,cAAckB,SAASV,QAAvB,CAAZ;AACD;;AAED,SAASO,SAAT,CAAmBF,KAAnB,EAAyBC,KAAzB,EAA+Bb,YAA/B,EAA4C;AAC1C,MAAImB,YAAYP,MAAMQ,KAAN,EAAhB;AAAA,MAA+BC,YAAYR,MAAMO,KAAN,EAA3C;AACA,MAAGpB,eAAe,CAAlB,EAAoB;AAClB,QAAI,CAACmB,SAAD,EAAWE,SAAX,IAAwBP,UAAUF,KAAV,EAAgBC,KAAhB,EAAsBb,eAAa,CAAnC,CAA5B;AACD;AACDmB,YAAUG,IAAV,CAAe,SAAOtB,YAAtB;AACA,MAAGA,eAAe,CAAlB,EAAoB;AAClBqB,cAAUC,IAAV,CAAe,SAAOtB,YAAP,GAAoB,OAApB,IAA6BA,eAAa,CAA1C,IAA6C,GAA7C,GAAiDuB,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,EAAjB,GAAuB,CAAlC,CAAhE;AACA,QAAGzB,eAAe,CAAlB,EAAoB;AAClBqB,gBAAUC,IAAV,CAAe,SAAOtB,YAAP,GAAoB,OAApB,IAA6BA,eAAa,CAA1C,IAA6C,GAA7C,GAAiDuB,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,EAAjB,GAAuB,CAAlC,CAAhE;AACD;AACF;AACD,SAAO,CAACN,SAAD,EAAWE,SAAX,CAAP;AACD","file":"index.js","sourcesContent":["import {dijkstras} from './js/Dijkstras.js';\nimport util from 'util';\n'use strict';\n\nconsole.log(\"FP Dijkstras algorithm:\");\nvar nrOfElements = 20;\nconsole.log(\"nrOfElements: \"+ nrOfElements);\nrunDijkstrasAlgorithm(nrOfElements);\n\nglobal.gc();\n\nfunction runDijkstrasAlgorithm(nrOfElements) {\n  var hrStart = process.hrtime();\n  var memStart = process.memoryUsage().rss;\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\n  var [nodes,edges] = makeGraph([],[],nrOfElements);\n  var startNode = \"node1\";\n  var endNode = \"node\"+nrOfElements;\n  dijkstras(nodes,edges,startNode,endNode);\n\n\n  console.info('end:\\n' + util.inspect(process.memoryUsage()));\n  var memEnd = process.memoryUsage().rss;\n  let hrEnd = process.hrtime(hrStart);\n  console.info(hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\n  console.log(\"Memory: \" + (memEnd - memStart));\n}\n\nfunction makeGraph(nodes,edges,nrOfElements){\n  var nodesCopy = nodes.slice(), edgesCopy = edges.slice();\n  if(nrOfElements > 1){\n    var [nodesCopy,edgesCopy] = makeGraph(nodes,edges,nrOfElements-1)\n  }\n  nodesCopy.push(\"node\"+nrOfElements);\n  if(nrOfElements > 1){\n    edgesCopy.push(\"node\"+nrOfElements+\"-node\"+(nrOfElements-1)+\"=\"+Math.floor((Math.random() * 10) + 1));\n    if(nrOfElements > 2){\n      edgesCopy.push(\"node\"+nrOfElements+\"-node\"+(nrOfElements-2)+\"=\"+Math.floor((Math.random() * 10) + 1));\n    }\n  }\n  return [nodesCopy,edgesCopy];\n}\n"]}