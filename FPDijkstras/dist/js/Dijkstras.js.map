{"version":3,"sources":["../../src/js/Dijkstras.js"],"names":["dijkstras","createPathAndDist","unvisitedNotEmpty","findCurrentNode","assignPathAndDist","graph","edges","startNode","endNode","path","dist","length","indexOf","unvisitedNodes","slice","currentNode","currentValue","Number","MAX_SAFE_INTEGER","pathAndDist","pathCopy","distCopy","push","unvisitedCopy","nodeCopy","value","filter","node","graphLength","valueCopy","edgeLength","currentFromNode","currentToNode","currentEdgeLength","parseInt"],"mappings":"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","file":"Dijkstras.js","sourcesContent":["'use strict';\n\nexport function dijkstras(graph,edges,startNode,endNode){\n  if(startNode != endNode){\n    var [path,dist] = createPathAndDist(graph.length,[],[]);\n\n    dist[graph.indexOf(startNode)] = 0;\n    path[graph.indexOf(startNode)] = \"\";\n\n    var unvisitedNodes = graph.slice();\n    var currentNode = 0;\n    var currentValue = Number.MAX_SAFE_INTEGER;\n    var pathAndDist = unvisitedNotEmpty(graph,edges,startNode,endNode,path,dist,unvisitedNodes,currentNode,currentValue);\n    return pathAndDist[1][graph.indexOf(endNode)];\n  }else{\n    return 0;\n  }\n}\n\nexport function createPathAndDist(length,path,dist){\n  var pathCopy = path.slice(),distCopy = dist.slice();\n  if(length > 1){\n    var [pathCopy, distCopy] = createPathAndDist(length-1,pathCopy,distCopy);\n  }\n  pathCopy.push(\"\");\n  distCopy.push(Number.MAX_SAFE_INTEGER);\n  return [pathCopy,distCopy];\n\n}\n\nexport function unvisitedNotEmpty(graph, edges,startNode,endNode,path,dist,unvisitedNodes,currentNode,currentValue){\n  var pathCopy = path.slice(),distCopy = dist.slice(),unvisitedCopy = unvisitedNodes.slice(),nodeCopy = currentNode;\n  if(unvisitedCopy.length > 0 && unvisitedCopy.indexOf(endNode) != -1){\n    var [nodeCopy,value] = findCurrentNode(graph,graph.length,unvisitedCopy,distCopy,nodeCopy,currentValue);\n\n    unvisitedCopy = unvisitedCopy.filter(function(node){\n      return node != graph[nodeCopy];\n    });\n    var [pathCopy,distCopy] = assignPathAndDist(graph,edges,edges.length-1,pathCopy,distCopy,nodeCopy);\n\n    var [pathCopy,distCopy] = unvisitedNotEmpty(graph,edges,startNode,endNode,pathCopy,distCopy,unvisitedCopy,nodeCopy,currentValue);\n  }\n  return [pathCopy,distCopy];\n\n}\n\nexport function findCurrentNode(graph,graphLength,unvisitedNodes,dist,currentNode,currentValue){\n  var nodeCopy = currentNode, valueCopy = currentValue;\n  if(graphLength > 0){\n    var [nodeCopy,valueCopy] = findCurrentNode(graph,graphLength-1,unvisitedNodes,dist,nodeCopy,valueCopy);\n  }\n\n  if(dist[graphLength] < valueCopy && unvisitedNodes.indexOf(graph[graphLength]) != -1){\n    nodeCopy = graphLength;\n    valueCopy = dist[graphLength];\n  }\n  return [nodeCopy,valueCopy];\n}\n\nexport function assignPathAndDist(graph,edges,edgeLength,path,dist,currentNode){\n  var pathCopy = path.slice(), distCopy = dist.slice();\n  if(edgeLength > 0){\n    var [pathCopy,distCopy] = assignPathAndDist(graph,edges,edgeLength-1,pathCopy,distCopy,currentNode);\n  }\n\n  var currentFromNode = edges[edgeLength].slice(0,edges[edgeLength].indexOf(\"-\"));\n  var currentToNode = edges[edgeLength].slice(edges[edgeLength].indexOf(\"-\")+1,edges[edgeLength].indexOf(\"=\"));\n  var currentEdgeLength = edges[edgeLength].slice(edges[edgeLength].indexOf(\"=\")+1,edges[edgeLength].length);\n\n  if(currentFromNode == graph[currentNode] && distCopy[graph.indexOf(currentToNode)] > dist[currentNode] + parseInt(currentEdgeLength)){\n    distCopy[graph.indexOf(currentToNode)] = parseInt(distCopy[currentNode]) + parseInt(currentEdgeLength);\n    pathCopy[graph.indexOf(currentToNode)] = pathCopy[currentNode] +\",\"+ currentFromNode+\"-\"+currentToNode+\"=\"+currentEdgeLength;\n  }else if(currentToNode == graph[currentNode] && dist[graph.indexOf(currentFromNode)] > dist[currentNode] + parseInt(currentEdgeLength)){\n    distCopy[graph.indexOf(currentFromNode)] = parseInt(distCopy[currentNode]) + parseInt(currentEdgeLength);\n    pathCopy[graph.indexOf(currentToNode)] = pathCopy[currentNode] +\",\"+ currentToNode+\"-\"+currentFromNode+\"=\"+currentEdgeLength;\n  }\n\n  return [pathCopy,distCopy];\n}\n"]}