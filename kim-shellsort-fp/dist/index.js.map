{"version":3,"sources":["../src/index.js"],"names":["console","log","size","runMeasurements","createRandomArray","global","gc","array","hrStart","process","hrtime","memStart","memoryUsage","rss","info","inspect","memEnd","hrEnd","getRandom","Math","floor","random","randomArray","length","concat"],"mappings":";;AAAA;;AACA;;;;;;AACA;;AAEAA,QAAQC,GAAR,CAAY,cAAZ;AACA,IAAIC,OAAO,IAAX;AACAF,QAAQC,GAAR,CAAY,gBAAgBC,IAA5B;AACAC,gBAAgBC,kBAAkBF,IAAlB,CAAhB;AACAG,OAAOC,EAAP;;AAEA,SAASH,eAAT,CAAyBI,KAAzB,EAAgC;AAC9B,MAAIC,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,GAArC;AACAb,UAAQc,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAA1B;;AAEA,qCAAUL,KAAV;;AAEAP,UAAQc,IAAR,CAAa,WAAW,eAAKC,OAAL,CAAaN,QAAQG,WAAR,EAAb,CAAxB;AACA,MAAII,SAASP,QAAQG,WAAR,GAAsBC,GAAnC;AACA,MAAII,QAAQR,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAR,UAAQc,IAAR,CAAa,cAAcG,MAAM,CAAN,CAAd,GAAyB,QAAzB,GAAoCA,MAAM,CAAN,IAAW,OAA/C,GAAyD,IAAtE;AACAjB,UAAQc,IAAR,CAAa,cAAcE,SAASL,QAAvB,CAAb;AACD;;AAED,SAASP,iBAAT,CAA2BF,IAA3B,EAAiC;AAC/B,MAAIgB,YAAY,YAAW;AACzB,WAAOC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBnB,IAAhB,GAAuB,CAAxB,GAA6B,CAAxC,CAAP;AACD,GAFD;;AAIA,MAAIoB,cAAc,EAAlB;AACA,MAAIA,YAAYC,MAAZ,IAAsBrB,IAA1B,EAAgC;AAC9B,WAAOoB,WAAP;AACD,GAFD,MAEO;AACL,WAAOA,YAAYE,MAAZ,CAAmBN,WAAnB,EAAgCM,MAAhC,CAAuCpB,kBAAkBF,OAAO,CAAzB,CAAvC,CAAP;AACD;AACF","file":"index.js","sourcesContent":["import { shellsort } from './js/shellsort-functions';\r\nimport util from 'util';\r\n'use strict';\r\n\r\nconsole.log('Shellsort FP');\r\nvar size = 6000;\r\nconsole.log(\"Data size: \" + size);\r\nrunMeasurements(createRandomArray(size));\r\nglobal.gc();\r\n\r\nfunction runMeasurements(array) {\r\n  var hrStart = process.hrtime();\r\n  var memStart = process.memoryUsage().rss;\r\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\r\n\r\n  shellsort(array);\r\n\r\n  console.info('end:\\n' + util.inspect(process.memoryUsage()));\r\n  var memEnd = process.memoryUsage().rss;\r\n  let hrEnd = process.hrtime(hrStart);\r\n  console.info('Runtime: ' + hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\r\n  console.info('Memory: ' + (memEnd - memStart));\r\n}\r\n\r\nfunction createRandomArray(size) {\r\n  var getRandom = function() {\r\n    return Math.floor((Math.random() * size * 2) + 1);\r\n  }\r\n\r\n  var randomArray = [];\r\n  if (randomArray.length >= size) {\r\n    return randomArray;\r\n  } else {\r\n    return randomArray.concat(getRandom()).concat(createRandomArray(size - 1));\r\n  }\r\n}\r\n"]}