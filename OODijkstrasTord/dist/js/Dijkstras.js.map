{"version":3,"sources":["../../src/js/Dijkstras.js"],"names":["Dijkstras","dijkstras","graph","edges","startNode","endNode","dist","path","i","length","Number","MAX_SAFE_INTEGER","indexOf","unvisitedNodes","slice","currentNode","currentValue","currentFromNode","currentToNode","currentEdgeLength","splice","parseInt"],"mappings":"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","file":"Dijkstras.js","sourcesContent":["'use strict';\n\nexport default class Dijkstras {\n  dijkstras(graph,edges,startNode,endNode){\n    if(startNode != endNode){\n      var dist = [];\n      var path = [];\n      for(var i = 0; i < graph.length; i++){\n        dist[i] = Number.MAX_SAFE_INTEGER;\n        path[i] = \"\";\n      }\n      dist[graph.indexOf(startNode)] = 0;\n      path[graph.indexOf(startNode)] = \"\";\n      var unvisitedNodes = graph.slice();\n      var currentNode=0;\n      var currentValue = Number.MAX_SAFE_INTEGER;\n      var currentFromNode = \"\";\n      var currentToNode = \"\";\n      var currentEdgeLength = 0;\n      while(unvisitedNodes.length != 0 || unvisitedNodes.indexOf(graph.indexOf(endNode)) != -1){\n        for(var i = 0;i < graph.length; i++){\n          if(dist[i] < currentValue && unvisitedNodes.indexOf(graph[i]) != -1){\n            currentNode = i;\n            currentValue = dist[i];\n          }\n        }\n\n        unvisitedNodes.splice(unvisitedNodes.indexOf(graph[currentNode]),1);\n        for (var i = 0; i < edges.length; i++) {\n          currentFromNode = edges[i].slice(0,edges[i].indexOf(\"-\"));\n          currentToNode = edges[i].slice(edges[i].indexOf(\"-\")+1,edges[i].indexOf(\"=\"));\n          currentEdgeLength = edges[i].slice(edges[i].indexOf(\"=\")+1,edges[i].length);\n          if(currentFromNode == graph[currentNode] && dist[graph.indexOf(currentToNode)] > dist[currentNode] + parseInt(currentEdgeLength)){\n            dist[graph.indexOf(currentToNode)] = parseInt(dist[currentNode]) + parseInt(currentEdgeLength);\n            path[graph.indexOf(currentToNode)] = path[currentNode] +\",\"+ currentFromNode+\"-\"+currentToNode+\"=\"+currentEdgeLength;\n          }else if(currentToNode == graph[currentNode] && dist[graph.indexOf(currentFromNode)] > dist[currentNode] + parseInt(currentEdgeLength)){\n            dist[graph.indexOf(currentFromNode)] = parseInt(dist[currentNode]) + parseInt(currentEdgeLength);\n            path[graph.indexOf(currentToNode)] = path[currentNode] +\",\"+ currentToNode+\"-\"+currentFromNode+\"=\"+currentEdgeLength;\n          }\n        }\n        currentValue = Number.MAX_SAFE_INTEGER;\n      }\n      return dist[graph.indexOf(endNode)];\n    }else{\n      return 0;\n    }\n  }\n}\n"]}