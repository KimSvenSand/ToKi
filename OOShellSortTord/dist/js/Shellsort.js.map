{"version":3,"sources":["../../src/js/Shellsort.js"],"names":["Shellsort","runShellsort","array","gapSequence","sortedArray","currentGap","currentGapIndex","currentValue","currentIndex","i","length","getGapSequence","push","Math","pow","insertRandomValues","nrOfElements","floor","random"],"mappings":"AAAA;;;;;AAEe,MAAMA,SAAN,CAAgB;;AAE7BC,eAAaC,KAAb,EAAmBC,WAAnB,EAA+B;AAC7B,QAAIC,cAAcF,KAAlB;AACA,QAAIG,aAAa,CAAjB;AACA,QAAIC,kBAAkB,CAAtB;AACA,QAAIC,eAAe,CAAnB;AACA,QAAIC,eAAe,CAAnB;AACA,SAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIN,YAAYO,MAAhB,IAA0BP,YAAYM,CAAZ,KAAkBL,YAAYM,MAAZ,GAAmB,CAA9E,EAAiFD,GAAjF,EAAqF;AACnFJ,mBAAaF,YAAYM,CAAZ,CAAb;AACAH,wBAAkBG,CAAlB;AACD;AACD,WAAMJ,aAAa,CAAnB,EAAqB;AACnB,WAAI,IAAII,IAAIJ,UAAZ,EAAuBI,IAAIL,YAAYM,MAAvC,EAA8CD,GAA9C,EAAkD;AAChDF,uBAAeH,YAAYK,CAAZ,CAAf;AACAD,uBAAeC,CAAf;AACA,eAAOD,eAAeH,UAAhB,IAA+B,CAA/B,IAAoCD,YAAYI,eAAeH,UAA3B,IAAyCE,YAAnF,EAAgG;AAC9FH,sBAAYI,YAAZ,IAA4BJ,YAAYI,eAAeH,UAA3B,CAA5B;AACAG,yBAAeA,eAAeH,UAA9B;AACD;AACDD,oBAAYI,YAAZ,IAA4BD,YAA5B;AACD;AACDD;AACAD,mBAAaF,YAAYG,eAAZ,CAAb;AACD;AACD,WAAOF,WAAP;AACD;;AAEDO,mBAAgB;AACd,QAAIR,cAAc,EAAlB;AACAA,gBAAYS,IAAZ,CAAiB,CAAjB;AACA,SAAI,IAAIH,IAAI,CAAZ,EAAeA,IAAI,EAAnB,EAAuBA,GAAvB,EAA2B;AACzBN,kBAAYS,IAAZ,CAAiB,KAAGC,KAAKC,GAAL,CAAS,CAAT,EAAWL,CAAX,IAAgBI,KAAKC,GAAL,CAAS,CAAT,EAAWL,CAAX,CAAnB,IAAoC,CAArD;AACAN,kBAAYS,IAAZ,CAAiBC,KAAKC,GAAL,CAAS,CAAT,EAAWL,IAAE,CAAb,KAAiBI,KAAKC,GAAL,CAAS,CAAT,EAAWL,IAAE,CAAb,IAAgB,CAAjC,IAAoC,CAArD;AACD;AACD,WAAON,WAAP;AACD;;AAEDY,qBAAmBC,YAAnB,EAAgC;AAC9B,QAAId,QAAQ,EAAZ;AACA,SAAI,IAAIO,IAAI,CAAZ,EAAeA,IAAIO,YAAnB,EAAiCP,GAAjC,EAAqC;AACnCP,YAAMU,IAAN,CAAWC,KAAKI,KAAL,CAAYJ,KAAKK,MAAL,KAAgBF,YAAhB,GAA+B,EAAhC,GAAsC,CAAjD,CAAX;AACD;AACD,WAAOd,KAAP;AACD;;AA5C4B;kBAAVF,S","file":"Shellsort.js","sourcesContent":["'use strict';\n\nexport default class Shellsort {\n\n  runShellsort(array,gapSequence){\n    var sortedArray = array;\n    var currentGap = 1;\n    var currentGapIndex = 0;\n    var currentValue = 0;\n    var currentIndex = 0;\n    for(var i = 0; i < gapSequence.length && gapSequence[i] <= sortedArray.length/2; i++){\n      currentGap = gapSequence[i];\n      currentGapIndex = i;\n    }\n    while(currentGap > 0){\n      for(var i = currentGap;i < sortedArray.length;i++){\n        currentValue = sortedArray[i];\n        currentIndex = i;\n        while((currentIndex - currentGap) >= 0 && sortedArray[currentIndex - currentGap] > currentValue){\n          sortedArray[currentIndex] = sortedArray[currentIndex - currentGap];\n          currentIndex = currentIndex - currentGap;\n        }\n        sortedArray[currentIndex] = currentValue;\n      }\n      currentGapIndex--;\n      currentGap = gapSequence[currentGapIndex];\n    }\n    return sortedArray;\n  }\n\n  getGapSequence(){\n    var gapSequence = [];\n    gapSequence.push(0);\n    for(var i = 0; i < 10; i++){\n      gapSequence.push(9*(Math.pow(4,i) - Math.pow(2,i)) + 1);\n      gapSequence.push(Math.pow(2,i+2)*(Math.pow(2,i+2)-3)+1);\n    }\n    return gapSequence;\n  }\n\n  insertRandomValues(nrOfElements){\n    var array = [];\n    for(var i = 0; i < nrOfElements; i++){\n      array.push(Math.floor((Math.random() * nrOfElements * 10) + 1));\n    }\n    return array;\n  }\n\n}\n"]}