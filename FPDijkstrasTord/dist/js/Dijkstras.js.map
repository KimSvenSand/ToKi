{"version":3,"sources":["../../src/js/Dijkstras.js"],"names":["dijkstras","createPathAndDist","unvisitedNotEmpty","findCurrentNode","assignPathAndDist","removeVisitedItem","graph","edges","startNode","endNode","pathAndDist","length","path","dist","indexOf","unvisitedNodes","slice","currentNode","currentValue","Number","MAX_SAFE_INTEGER","arr","push","graphLength","edgeLength","currentFromNode","currentToNode","currentEdgeLength","parseInt","unvisitedLength","newArray"],"mappings":"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","file":"Dijkstras.js","sourcesContent":["'use strict';\n\nexport function dijkstras(graph,edges,startNode,endNode){\n  if(startNode != endNode){\n    var pathAndDist = createPathAndDist(graph.length,[],[]);\n    var path = pathAndDist[0];\n    var dist = pathAndDist[1];\n\n    dist[graph.indexOf(startNode)] = 0;\n    path[graph.indexOf(startNode)] = \"\";\n\n    var unvisitedNodes = graph.slice();\n    var currentNode = 0;\n    var currentValue = Number.MAX_SAFE_INTEGER;\n    var pathAndDist = unvisitedNotEmpty(graph,edges,startNode,endNode,path,dist,unvisitedNodes,currentNode,currentValue);\n    return pathAndDist[1][graph.indexOf(endNode)];\n  }else{\n    return 0;\n  }\n}\n\nexport function createPathAndDist(length,path,dist){\n  if(length > 1){\n    var arr = createPathAndDist(length-1,path,dist);\n    path = arr[0];\n    dist = arr[1];\n  }\n  path.push(\"\");\n  dist.push(Number.MAX_SAFE_INTEGER);\n  return [path,dist];\n\n}\n\nexport function unvisitedNotEmpty(graph, edges,startNode,endNode,path,dist,unvisitedNodes,currentNode,currentValue){\n  if(unvisitedNodes.length > 0 && unvisitedNodes.indexOf(endNode) != -1){\n    var arr = findCurrentNode(graph,graph.length,unvisitedNodes,dist,currentNode,currentValue);\n    currentNode = arr[0];\n    unvisitedNodes = removeVisitedItem(graph,unvisitedNodes,unvisitedNodes.length-1,currentNode,[]);\n    var arr = assignPathAndDist(graph,edges,edges.length-1,path,dist,currentNode);\n    path = arr[0];\n    dist = arr[1];\n\n    var arr = unvisitedNotEmpty(graph,edges,startNode,endNode,path,dist,unvisitedNodes,currentNode,currentValue);\n    path = arr[0];\n    dist = arr[1];\n  }\n  return [path,dist];\n\n}\n\nexport function findCurrentNode(graph,graphLength,unvisitedNodes,dist,currentNode,currentValue){\n  if(graphLength > 0){\n    var arr = findCurrentNode(graph,graphLength-1,unvisitedNodes,dist,currentNode,currentValue);\n    currentNode = arr[0];\n    currentValue = arr[1];\n  }\n\n  if(dist[graphLength] < currentValue && unvisitedNodes.indexOf(graph[graphLength]) != -1){\n    currentNode = graphLength;\n    currentValue = dist[graphLength];\n  }\n  return [currentNode,currentValue];\n}\n\nexport function assignPathAndDist(graph,edges,edgeLength,path,dist,currentNode){\n  if(edgeLength > 0){\n    var arr = assignPathAndDist(graph,edges,edgeLength-1,path,dist,currentNode);\n    path = arr[0];\n    dist = arr[1];\n  }\n  var currentFromNode = edges[edgeLength].slice(0,edges[edgeLength].indexOf(\"-\"));\n  var currentToNode = edges[edgeLength].slice(edges[edgeLength].indexOf(\"-\")+1,edges[edgeLength].indexOf(\"=\"));\n  var currentEdgeLength = edges[edgeLength].slice(edges[edgeLength].indexOf(\"=\")+1,edges[edgeLength].length);\n\n  if(currentFromNode == graph[currentNode] && dist[graph.indexOf(currentToNode)] > dist[currentNode] + parseInt(currentEdgeLength)){\n    dist[graph.indexOf(currentToNode)] = parseInt(dist[currentNode]) + parseInt(currentEdgeLength);\n    path[graph.indexOf(currentToNode)] = path[currentNode] +\",\"+ currentFromNode+\"-\"+currentToNode+\"=\"+currentEdgeLength;\n  }else if(currentToNode == graph[currentNode] && dist[graph.indexOf(currentFromNode)] > dist[currentNode] + parseInt(currentEdgeLength)){\n    dist[graph.indexOf(currentFromNode)] = parseInt(dist[currentNode]) + parseInt(currentEdgeLength);\n    path[graph.indexOf(currentToNode)] = path[currentNode] +\",\"+ currentToNode+\"-\"+currentFromNode+\"=\"+currentEdgeLength;\n  }\n\n  return [path,dist];\n}\n\nexport function removeVisitedItem(graph,unvisitedNodes,unvisitedLength,currentNode,newArray){\n  if(unvisitedLength > 0){\n    newArray = removeVisitedItem(graph,unvisitedNodes,unvisitedLength-1,currentNode,newArray);\n  }\n  if(unvisitedNodes[unvisitedLength] != graph[currentNode]){\n    newArray.push(unvisitedNodes[unvisitedLength]);\n  }\n  return newArray;\n}\n"]}