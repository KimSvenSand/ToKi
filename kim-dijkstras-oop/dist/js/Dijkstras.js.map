{"version":3,"sources":["../../src/js/Dijkstras.js"],"names":["Dijkstras","getShortestPath","startNode","endNode","graph","dist","path","unvisited","visited","current","currentIndex","currentNeighbors","resultingPath","undefined","getNodes","slice","i","length","getName","Infinity","includes","getNeighbors","filter","neighbor","splice","tmp","findEdge","getWeight","concat"],"mappings":"AAAA;;;;;AAEe,MAAMA,SAAN,CAAgB;AAC7BC,kBAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,KAApC,EAA2C;AACzC,QAAIC,OAAO,EAAX;AACA,QAAIC,OAAO,EAAX;AACA,QAAIC,YAAY,EAAhB;AACA,QAAIC,UAAU,EAAd;AACA,QAAIC,OAAJ;AACA,QAAIC,YAAJ;AACA,QAAIC,gBAAJ;AACA,QAAIC,gBAAgB;AAClB,cAAQ,EADU;AAElB,cAAQ;AAFU,KAApB;;AAKA,QAAIV,cAAcW,SAAd,IAA2BV,YAAYU,SAA3C,EAAsD;AACpD,aAAOD,aAAP;AACD,KAFD,MAEO,IAAIV,cAAcC,OAAlB,EAA2B;AAChC,aAAOS,aAAP;AACD;AACD,QAAIL,YAAYH,MAAMU,QAAN,GAAiBC,KAAjB,EAAhB;;AAEA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIZ,MAAMU,QAAN,GAAiBG,MAArC,EAA6CD,GAA7C,EAAkD;AAChDX,WAAKD,MAAMU,QAAN,GAAiBE,CAAjB,EAAoBE,OAApB,EAAL,IAAsCC,QAAtC;AACD;AACDb,SAAKJ,UAAUgB,OAAV,EAAL,IAA4B,EAA5B;AACAb,SAAKH,UAAUgB,OAAV,EAAL,IAA4B,CAA5B;;AAEA,WAAOX,UAAUU,MAAV,GAAmB,CAAnB,IAAwBV,UAAUa,QAAV,CAAmBjB,OAAnB,CAA/B,EAA4D;AAC1DM,gBAAUF,UAAU,CAAV,CAAV;AACAG,qBAAe,CAAf;AACA,WAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIT,UAAUU,MAA9B,EAAsCD,GAAtC,EAA2C;AACzC,YAAIX,KAAKE,UAAUS,CAAV,EAAaE,OAAb,EAAL,IAA+Bb,KAAKI,QAAQS,OAAR,EAAL,CAAnC,EAA4D;AAC1DT,oBAAUF,UAAUS,CAAV,CAAV;AACAN,yBAAeM,CAAf;AACD;AACF;AACDL,yBAAmBF,QAAQY,YAAR,GAAuBC,MAAvB,CAA8B,UAASC,QAAT,EAAmB;AAClE,eAAOhB,UAAUa,QAAV,CAAmBG,QAAnB,CAAP;AACD,OAFkB,CAAnB;;AAIAhB,gBAAUiB,MAAV,CAAiBd,YAAjB,EAA+B,CAA/B;AACA,WAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAIL,iBAAiBM,MAArC,EAA6CD,GAA7C,EAAkD;AAChD,YAAIS,MAAMpB,KAAKI,QAAQS,OAAR,EAAL,IAA0BT,QAAQiB,QAAR,CAAiBf,iBAAiBK,CAAjB,CAAjB,EAAsCW,SAAtC,EAApC;AACA,YAAIF,MAAMpB,KAAKM,iBAAiBK,CAAjB,EAAoBE,OAApB,EAAL,CAAV,EAA+C;AAC7Cb,eAAKM,iBAAiBK,CAAjB,EAAoBE,OAApB,EAAL,IAAsCO,GAAtC;AACA,cAAInB,KAAKK,iBAAiBK,CAAjB,EAAoBE,OAApB,EAAL,MAAwCL,SAAxC,IAAqD,CAACP,KAAKK,iBAAiBK,CAAjB,EAAoBE,OAApB,EAAL,EAAoCE,QAApC,CAA6CX,OAA7C,CAA1D,EAAiH;AAC/GH,iBAAKK,iBAAiBK,CAAjB,EAAoBE,OAApB,EAAL,IAAsCZ,KAAKG,QAAQS,OAAR,EAAL,EAAwBH,KAAxB,GAAgCa,MAAhC,CAAuCnB,OAAvC,CAAtC;AACD;AACF;AACF;AACF;;AAED,WAAO;AACL,cAAQH,KAAKH,QAAQe,OAAR,EAAL,CADH;AAEL,cAAQb,KAAKF,QAAQe,OAAR,EAAL;AAFH,KAAP;AAID;AAxD4B;kBAAVlB,S","file":"Dijkstras.js","sourcesContent":["'use strict'\n\nexport default class Dijkstras {\n  getShortestPath(startNode, endNode, graph) {\n    var dist = [];\n    var path = [];\n    var unvisited = [];\n    var visited = [];\n    var current;\n    var currentIndex;\n    var currentNeighbors;\n    var resultingPath = {\n      'path': [],\n      'dist': 0\n    }\n\n    if (startNode === undefined || endNode === undefined) {\n      return resultingPath;\n    } else if (startNode === endNode) {\n      return resultingPath;\n    }\n    var unvisited = graph.getNodes().slice();\n\n    for (var i = 0; i < graph.getNodes().length; i++) {\n      dist[graph.getNodes()[i].getName()] = Infinity;\n    }\n    path[startNode.getName()] = [];\n    dist[startNode.getName()] = 0;\n\n    while (unvisited.length > 0 && unvisited.includes(endNode)) {\n      current = unvisited[0];\n      currentIndex = 0;\n      for (var i = 0; i < unvisited.length; i++) {\n        if (dist[unvisited[i].getName()] < dist[current.getName()]) {\n          current = unvisited[i];\n          currentIndex = i;\n        }\n      }\n      currentNeighbors = current.getNeighbors().filter(function(neighbor) {\n        return unvisited.includes(neighbor);\n      });\n\n      unvisited.splice(currentIndex, 1);\n      for (var i = 0; i < currentNeighbors.length; i++) {\n        var tmp = dist[current.getName()] + current.findEdge(currentNeighbors[i]).getWeight();\n        if (tmp < dist[currentNeighbors[i].getName()]) {\n          dist[currentNeighbors[i].getName()] = tmp;\n          if (path[currentNeighbors[i].getName()] === undefined || !path[currentNeighbors[i].getName()].includes(current)) {\n            path[currentNeighbors[i].getName()] = path[current.getName()].slice().concat(current);\n          }\n        }\n      }\n    }\n\n    return {\n      'path': path[endNode.getName()],\n      'dist': dist[endNode.getName()]\n    }\n  }\n}\n"]}