{"version":3,"sources":["../../src/js/Graph.js"],"names":["Graph","constructor","nodes","_nodes","getNrOfNodes","length","findNode","name","node","getName","i","addNode","push","dijkstras","startNode","endNode","dist","path","unvisited","slice","visited","current","currentIndex","currentNeighbors","resultingPath","undefined","Infinity","includes","getNeighbors","filter","neighbor","splice","tmp","findEdge","getWeight","concat"],"mappings":"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","file":"Graph.js","sourcesContent":["import Node from './Node'\n'use strict'\n\nexport default class Graph {\n  constructor(nodes) {\n    if (nodes) {\n      this._nodes = nodes;\n    } else {\n      this._nodes = [];\n    }\n  }\n\n  getNrOfNodes() {\n    return this._nodes.length;\n  }\n\n  findNode(name) {\n    var node = null;\n    if (this._nodes[0].getName() === name) {\n      return this._nodes[0];\n    }\n    for (var i = 1; i < this._nodes.length && this._nodes[i - 1].getName() !== name; i++) {\n      node = this._nodes[i];\n    }\n    return node;\n  }\n\n  addNode(name) {\n    var node = new Node(name);\n    this._nodes.push(node);\n\n    return node;\n  }\n\n  dijkstras(startNode, endNode) {\n    var dist = [];\n    var path = [];\n    var unvisited = this._nodes.slice();\n    var visited = [];\n    var current;\n    var currentIndex;\n    var currentNeighbors;\n    var resultingPath = {\n      'path': [],\n      'dist': 0\n    }\n\n    if (startNode === undefined || endNode === undefined) {\n      return resultingPath;\n    } else if (startNode === endNode) {\n      return resultingPath;\n    }\n\n    for (var i = 0; i < this._nodes.length; i++) {\n      dist[this._nodes[i].getName()] = Infinity;\n    }\n    path[startNode.getName()] = [];\n    dist[startNode.getName()] = 0;\n\n    while (unvisited.length > 0 && unvisited.includes(endNode)) {\n      current = unvisited[0];\n      currentIndex = 0;\n      for (var i = 0; i < unvisited.length; i++) {\n        if (dist[unvisited[i].getName()] < dist[current.getName()]) {\n          current = unvisited[i];\n          currentIndex = i;\n        }\n      }\n      currentNeighbors = current.getNeighbors().filter(function(neighbor) {\n        return unvisited.includes(neighbor);\n      });\n\n      unvisited.splice(currentIndex, 1);\n      for (var i = 0; i < currentNeighbors.length; i++) {\n        var tmp = dist[current.getName()] + current.findEdge(currentNeighbors[i]).getWeight();\n        if (tmp < dist[currentNeighbors[i].getName()]) {\n          dist[currentNeighbors[i].getName()] = tmp;\n          if (path[currentNeighbors[i].getName()] === undefined || !path[currentNeighbors[i].getName()].includes(current)) {\n            path[currentNeighbors[i].getName()] = path[current.getName()].slice().concat(current);\n          }\n        }\n      }\n    }\n\n    return {\n      'path': path[endNode.getName()],\n      'dist': dist[endNode.getName()]\n    }\n  }\n}\n"]}