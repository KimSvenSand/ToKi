{"version":3,"sources":["../src/index.js"],"names":["size","dijkstras","graph","createGraph","runMeasurements","hrStart","process","hrtime","console","info","inspect","memoryUsage","result","getShortestPath","findNode","getNrOfNodes","hrEnd","getRandom","Math","floor","random","addNode","createEdge","i"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;;;AACA;;AAEA,IAAIA,OAAO,IAAX;AACA,IAAIC,YAAY,yBAAhB;AACA,IAAIC,QAAQC,YAAYH,IAAZ,CAAZ;AACAI,gBAAgBF,KAAhB,EAAuBD,SAAvB;;AAEA,SAASG,eAAT,CAAyBF,KAAzB,EAAgCD,SAAhC,EAA2C;AACzC,MAAII,UAAUC,QAAQC,MAAR,EAAd;AACAC,UAAQC,IAAR,CAAa,aAAa,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAA1B;;AAEA,MAAIC,SAASX,UAAUY,eAAV,CAA0BX,MAAMY,QAAN,CAAe,SAAS,CAAxB,CAA1B,EAAsDZ,MAAMY,QAAN,CAAe,SAASZ,MAAMa,YAAN,EAAxB,CAAtD,EAAqGb,KAArG,CAAb;;AAEAM,UAAQC,IAAR,CAAa,WAAW,eAAKC,OAAL,CAAaJ,QAAQK,WAAR,EAAb,CAAxB;AACA,MAAIK,QAAQV,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAG,UAAQC,IAAR,CAAaO,MAAM,CAAN,IAAW,QAAX,GAAsBA,MAAM,CAAN,IAAW,OAAjC,GAA2C,IAAxD;AACD;;AAED,SAASb,WAAT,CAAqBH,IAArB,EAA2B;AACzB,MAAIiB,YAAY,YAAW;AACzB,WAAOC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgB,GAAjB,GAAwB,CAAnC,CAAP;AACD,GAFD;;AAIA,MAAIlB,QAAQ,qBAAZ;AACA,MAAIF,QAAQ,CAAZ,EAAe;AACb,WAAOE,KAAP;AACD;AACDA,QAAMmB,OAAN,CAAc,SAAS,CAAvB;AACA,MAAIrB,QAAQ,CAAZ,EAAe;AACb,WAAOE,KAAP;AACD;AACDA,QAAMmB,OAAN,CAAc,SAAS,CAAvB,EACGC,UADH,CACcL,WADd,EAC2Bf,MAAMY,QAAN,CAAe,SAAS,CAAxB,CAD3B;AAEA,MAAId,QAAQ,CAAZ,EAAe;AACb,WAAOE,KAAP;AACD;;AAED,OAAK,IAAIqB,IAAI,CAAb,EAAgBA,KAAKvB,IAArB,EAA2BuB,GAA3B,EAAgC;AAC9BrB,UAAMmB,OAAN,CAAc,SAASE,CAAvB,EACGD,UADH,CACcL,WADd,EAC2Bf,MAAMY,QAAN,CAAe,UAAUS,IAAI,CAAd,CAAf,CAD3B,EAEGD,UAFH,CAEcL,WAFd,EAE2Bf,MAAMY,QAAN,CAAe,UAAUS,IAAI,CAAd,CAAf,CAF3B;AAGD;;AAED,SAAOrB,KAAP;AACD","file":"index.js","sourcesContent":["import Graph from './js/Graph'\nimport Dijkstras from './js/Dijkstras'\nimport util from 'util'\n'use strict'\n\nvar size = 1000;\nvar dijkstras = new Dijkstras();\nvar graph = createGraph(size);\nrunMeasurements(graph, dijkstras);\n\nfunction runMeasurements(graph, dijkstras) {\n  var hrStart = process.hrtime();\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\n\n  var result = dijkstras.getShortestPath(graph.findNode('node' + 1), graph.findNode('node' + graph.getNrOfNodes()), graph);\n\n  console.info('end:\\n' + util.inspect(process.memoryUsage()));\n  let hrEnd = process.hrtime(hrStart);\n  console.info(hrEnd[0] + 's and ' + hrEnd[1] / 1000000 + 'ms');\n}\n\nfunction createGraph(size) {\n  var getRandom = function() {\n    return Math.floor((Math.random() * 100) + 1);\n  }\n\n  var graph = new Graph();\n  if (size <= 0) {\n    return graph;\n  }\n  graph.addNode('node' + 1);\n  if (size <= 1) {\n    return graph;\n  }\n  graph.addNode('node' + 2)\n    .createEdge(getRandom(), graph.findNode('node' + 1));\n  if (size <= 2) {\n    return graph;\n  }\n\n  for (var i = 3; i <= size; i++) {\n    graph.addNode('node' + i)\n      .createEdge(getRandom(), graph.findNode('node' + (i - 1)))\n      .createEdge(getRandom(), graph.findNode('node' + (i - 2)));\n  }\n\n  return graph;\n}\n"]}