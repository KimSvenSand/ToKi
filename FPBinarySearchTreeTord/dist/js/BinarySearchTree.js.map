{"version":3,"sources":["../../src/js/BinarySearchTree.js"],"names":["createTree","insertRandomValues","inputArrayInTree","insert","findNode","inOrderTraversal","inputArray","length","returnArray","nrOfElements","returnCopy","Math","floor","random","placeInInputArray","arrayCopy","slice","input","place","tree","undefined","returnValue","push"],"mappings":"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","file":"BinarySearchTree.js","sourcesContent":["'use strict';\n\nexport function createTree(inputArray){\n  if(inputArray.length != 0){\n    var returnArray = inputArrayInTree(inputArray,0,[]);\n  }\n  else{\n    var returnArray = [];\n  }\n  return returnArray;\n}\n\nexport function insertRandomValues(nrOfElements,returnArray){\n  var returnCopy = returnArray;\n  if(nrOfElements > 0){\n    returnCopy = insertRandomValues(nrOfElements-1,returnCopy);\n    returnCopy = insert(Math.floor((Math.random() * nrOfElements * 10) + 1),0, returnCopy);\n  }\n  return returnCopy;\n}\n\nexport function inputArrayInTree(inputArray,placeInInputArray,returnArray){\n    var arrayCopy = returnArray.slice();\n    if(inputArray.length-1 >= placeInInputArray){\n      arrayCopy = insert(inputArray[placeInInputArray],0,arrayCopy);\n      arrayCopy = inputArrayInTree(inputArray,(placeInInputArray+1),arrayCopy);\n    }\n  return arrayCopy;\n}\n\n\nexport function insert(input,place,tree){\n  var arrayCopy = tree.slice();\n  if(arrayCopy[place] == undefined){\n    arrayCopy[place] = input;\n  }else{\n    if(input < arrayCopy[place]){\n      arrayCopy = insert(input,(place * 2 +1),arrayCopy);\n    }else if(input > arrayCopy[place]){\n      arrayCopy = insert(input,(place * 2 + 2),arrayCopy);\n    }\n  }\n  return arrayCopy;\n}\n\nexport function findNode(input,tree,place,returnValue){\n  var returnCopy = returnValue;\n  if(tree[place] == undefined){\n    returnCopy = undefined;\n  }else if(input == tree[place]){\n    returnCopy = tree[place];\n  }else if(input < tree[place]){\n    returnCopy = findNode(input,tree,(place*2+1),returnCopy);\n  }else{\n    returnCopy = findNode(input,tree,(place*2+2),returnCopy);\n  }\n  return returnCopy;\n}\n\nexport function inOrderTraversal(tree,place,returnArray){\n  var arrayCopy = returnArray.slice();\n  if(tree[place*2+1] != undefined){\n    arrayCopy = inOrderTraversal(tree,(place*2+1),arrayCopy);\n  }\n  if(tree[place] != undefined){\n    arrayCopy.push(tree[place]);\n  }\n  if(tree[place*2+2] != undefined){\n    arrayCopy = inOrderTraversal(tree,(place*2+2),arrayCopy);\n  }\n  return arrayCopy;\n}\n"]}