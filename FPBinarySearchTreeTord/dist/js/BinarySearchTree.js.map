{"version":3,"sources":["../../src/js/BinarySearchTree.js"],"names":["createTree","inputArrayInTree","findPlaceForInput","insert","findNode","inOrderTraversal","inputArray","length","returnArray","placeInInputArray","place","input","undefined","tree","returnValue","push"],"mappings":"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","file":"BinarySearchTree.js","sourcesContent":["'use strict';\n\nexport function createTree(inputArray){\n  if(inputArray.length != 0){\n    var returnArray = inputArrayInTree(inputArray,0,[]);\n  }\n  else{\n    var returnArray = [];\n  }\n  return returnArray;\n}\n\nexport function inputArrayInTree(inputArray,placeInInputArray,returnArray){\n    if(inputArray.length-1 >= placeInInputArray){\n      returnArray = findPlaceForInput(returnArray,0,inputArray[placeInInputArray]);\n      returnArray = inputArrayInTree(inputArray,(placeInInputArray+1),returnArray);\n    }\n  return returnArray;\n}\n\nexport function findPlaceForInput(returnArray,place,input){\n  if(returnArray[place] == undefined){\n    returnArray[place] = input;\n  }else{\n    if(input < returnArray[place]){\n      returnArray = findPlaceForInput(returnArray,(place * 2 +1),input);\n    }else if(input > returnArray[place]){\n      returnArray = findPlaceForInput(returnArray,(place * 2 + 2),input);\n    }\n  }\n  return returnArray;\n}\n\nexport function insert(input,tree){\n  var returnArray = findPlaceForInput(tree,0,input);\n  return returnArray;\n}\n\nexport function findNode(input,tree,place,returnValue){\n  if(tree[place] == undefined){\n    returnValue = undefined;\n  }else if(input == tree[place]){\n    returnValue = tree[place];\n  }else if(input < tree[place]){\n    returnValue = findNode(input,tree,(place*2+1));\n  }else{\n    returnValue = findNode(input,tree,(place*2+1));\n  }\n  return returnValue;\n}\n\nexport function inOrderTraversal(tree,place,returnArray){\n  if(tree[place*2+1] != undefined){\n    returnArray = inOrderTraversal(tree,(place*2+1),returnArray);\n  }\n  if(tree[place] != undefined){\n    returnArray.push(tree[place]);\n  }\n  if(tree[place*2+2] != undefined){\n    returnArray = inOrderTraversal(tree,(place*2+2),returnArray);\n  }\n  return returnArray;\n}\n"]}