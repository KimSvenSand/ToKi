{"version":3,"sources":["../src/index.js"],"names":["console","info","nrOfElements","log","runBinarySearchTree","global","gc","hrStart","process","hrtime","startMem","memoryUsage","rss","inspect","tree","Math","floor","random","endMem","hrEnd"],"mappings":";;AAAA;;AAGA;;;;;;AACA;;AAEAA,QAAQC,IAAR,CAAa,4BAAb;AACA,IAAIC,eAAe,IAAnB;AACAF,QAAQG,GAAR,CAAY,yBAAyBD,YAArC;AACAE,oBAAoBF,YAApB;;AAEAG,OAAOC,EAAP;;AAEA,SAASF,mBAAT,CAA6BF,YAA7B,EAA2C;AACzC,MAAIK,UAAUC,QAAQC,MAAR,EAAd;AACA,MAAIC,WAAWF,QAAQG,WAAR,GAAsBC,GAArC;AACAZ,UAAQC,IAAR,CAAa,aAAa,eAAKY,OAAL,CAAaL,QAAQG,WAAR,EAAb,CAA1B;AACA,MAAIG,OAAO,0CAAmBZ,YAAnB,EAAgC,EAAhC,CAAX;AACAF,UAAQC,IAAR,CAAa,oBAAoB,eAAKY,OAAL,CAAaL,QAAQG,WAAR,EAAb,CAAjC;AACA,0CAAiBG,IAAjB,EAAsB,CAAtB,EAAwB,EAAxB;AACAd,UAAQC,IAAR,CAAa,8BAA8B,eAAKY,OAAL,CAAaL,QAAQG,WAAR,EAAb,CAA3C;AACA,kCAASI,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBf,YAAhB,GAA+B,EAAhC,GAAsC,CAAjD,CAAT,EAA6DY,IAA7D,EAAkE,CAAlE,EAAoE,CAApE;AACA,kCAASC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBf,YAAhB,GAA+B,EAAhC,GAAsC,CAAjD,CAAT,EAA6DY,IAA7D,EAAkE,CAAlE,EAAoE,CAApE;AACA,kCAASC,KAAKC,KAAL,CAAYD,KAAKE,MAAL,KAAgBf,YAAhB,GAA+B,EAAhC,GAAsC,CAAjD,CAAT,EAA6DY,IAA7D,EAAkE,CAAlE,EAAoE,CAApE;AACA,MAAII,SAASV,QAAQG,WAAR,GAAsBC,GAAnC;AACAZ,UAAQC,IAAR,CAAa,gCAAgC,eAAKY,OAAL,CAAaL,QAAQG,WAAR,EAAb,CAA7C;;AAEA,MAAIQ,QAAQX,QAAQC,MAAR,CAAeF,OAAf,CAAZ;AACAP,UAAQC,IAAR,CAAa,cAAckB,MAAM,CAAN,CAAd,GAAyB,SAAzB,GAAqCA,MAAM,CAAN,IAAW,OAAhD,GAA0D,KAAvE;AACAnB,UAAQC,IAAR,CAAa,cAAciB,SAASR,QAAvB,CAAb;AACD","file":"index.js","sourcesContent":["import {inOrderTraversal} from './js/BinarySearchTree.js';\nimport {insertRandomValues} from './js/BinarySearchTree.js';\nimport {findNode} from './js/BinarySearchTree.js';\nimport util from 'util';\n'use strict';\n\nconsole.info(\"FP Tree search algorithms:\");\nvar nrOfElements = 1000;\nconsole.log(\"Number of elements: \" + nrOfElements);\nrunBinarySearchTree(nrOfElements);\n\nglobal.gc();\n\nfunction runBinarySearchTree(nrOfElements) {\n  var hrStart = process.hrtime();\n  var startMem = process.memoryUsage().rss;\n  console.info('start:\\n' + util.inspect(process.memoryUsage()));\n  let tree = insertRandomValues(nrOfElements,[]);\n  console.info('after insert:\\n' + util.inspect(process.memoryUsage()));\n  inOrderTraversal(tree,0,[]);\n  console.info('after inOrderTraversal:\\n' + util.inspect(process.memoryUsage()));\n  findNode(Math.floor((Math.random() * nrOfElements * 10) + 1),tree,0,0);\n  findNode(Math.floor((Math.random() * nrOfElements * 10) + 1),tree,0,0);\n  findNode(Math.floor((Math.random() * nrOfElements * 10) + 1),tree,0,0);\n  var endMem = process.memoryUsage().rss;\n  console.info('after 3x random findNode:\\n' + util.inspect(process.memoryUsage()));\n\n  let hrEnd = process.hrtime(hrStart);\n  console.info('Runtime: ' + hrEnd[0] + ' s and ' + hrEnd[1] / 1000000 + ' ms');\n  console.info('Memory: ' + (endMem - startMem));\n}\n"]}