{"version":3,"sources":["../es6-test/bst_test.js"],"names":["describe","inputArray","expectedResult","tree","input","it","to","eql","undefined","equal"],"mappings":"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","file":"bst_test.js","sourcesContent":["import {createTree} from '../dist/js/BinarySearchTree';\nimport {insert} from '../dist/js/BinarySearchTree';\nimport {findNode} from '../dist/js/BinarySearchTree';\nimport {inOrderTraversal} from '../dist/js/BinarySearchTree';\nimport { expect } from 'chai';\n\ndescribe('BinarySearchTree', function() {\n  var inputArray = [13,6,24,2,3,7,9,16,20,32];\n  var expectedResult = 0;\n  var tree = createTree(inputArray);\n  var input = 0;\n\n  describe('createTree', function() {\n    it(\"should return a binary tree in array form\", function() {\n      expectedResult = [13,6,24,2,7,16,32,,3,,9,,20];\n      expect(createTree(inputArray)).to.eql(expectedResult);\n    });\n  });\n\n  describe('createTree if empty', function() {\n    it(\"should return a empty binary tree in array form\", function() {\n      expectedResult = [];\n\n      expect(createTree([])).to.eql(expectedResult);\n    });\n  });\n\n  describe('insert',function(){\n    it('inserts a number thats already in the tree, should return full array without new number', function(){\n        input = 9;\n        expectedResult = [13,6,24,2,7,16,32,,3,,9,,20];\n        expect(insert(input,0,tree)).to.eql(expectedResult);\n    });\n  });\n\n  describe('insert',function(){\n    it('inserts a number thats already in the tree, should return full array with new number 8', function(){\n        input = 8;\n        expectedResult = [13,6,24,2,7,16,32,,3,,9,,20,,,,,,,,,8];\n        expect(insert(input,0,tree)).to.eql(expectedResult);\n    });\n  });\n\n  describe('insert',function(){\n    it('inserts a number thats already in the tree, should return full array with new number 1', function(){\n        input = 1;\n\n        expectedResult = [13,6,24,2,7,16,32,1,3,,9,,20];\n        expect(insert(input,0,tree)).to.eql(expectedResult);\n    });\n  });\n\n  describe('insert',function(){\n    it('inserts a number thats already in the tree, should return full array with new number 33', function(){\n        input = 33;\n\n        expectedResult = [13,6,24,2,7,16,32,,3,,9,,20,,33];\n        expect(insert(input,0,tree)).to.eql(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return undefined since the node isnt in the tree', function() {\n      input = 5;\n\n      expectedResult = undefined;\n      expect(findNode(input,tree,0,0)).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return the key 13', function() {\n      input = 13;\n\n      expectedResult = 13;\n      expect(findNode(input,tree,0,0)).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return key 2', function() {\n      input = 2;\n\n      expectedResult = 2;\n      expect(findNode(input,tree,0,0)).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return key 32', function() {\n      input = 32;\n\n      expectedResult = 32;\n      expect(findNode(input,tree,0,0)).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return key 20', function() {\n      input = 20;\n\n      expectedResult = 20;\n      expect(findNode(input,tree,0,0)).to.equal(expectedResult);\n    });\n  });\n\n\n  describe('inOrderTravelsal', function() {\n    it(\"should return an ordered array\", function() {\n\n      expectedResult = [2,3,6,7,9,13,16,20,24,32];\n      expect(inOrderTraversal(tree,0,[])).to.eql(expectedResult);\n    });\n  });\n  describe('empty inOrderTravelsal', function() {\n    it(\"should return an empty array\", function() {\n      expectedResult = [];\n\n      expect(inOrderTraversal([],0,[])).to.eql(expectedResult);\n    });\n  });\n});\n"]}