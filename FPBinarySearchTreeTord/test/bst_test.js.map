{"version":3,"sources":["../es6-test/bst_test.js"],"names":["describe","inputArray","expectedResult","input","it","to","eql","tree","console","log","equal","undefined"],"mappings":"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","file":"bst_test.js","sourcesContent":["import {createTree} from '../dist/js/BinarySearchTree';\nimport {insert} from '../dist/js/BinarySearchTree';\nimport {findNode} from '../dist/js/BinarySearchTree';\nimport {inOrderTraversal} from '../dist/js/BinarySearchTree';\nimport { expect } from 'chai';\n\ndescribe('BinarySearchTree', function() {\n  var inputArray = [3,2,5,1,4];\n  var expectedResult = 0;\n  var input = 0;\n\n  describe('createTree', function() {\n    it(\"should return a binary tree in array form\", function() {\n      expectedResult = [3,2,5,1,,4];\n\n      expect(createTree(inputArray)).to.eql(expectedResult);\n    });\n  });\n\n  describe('createTree if empty', function() {\n    it(\"should return a empty binary tree in array form\", function() {\n      expectedResult = [];\n\n      expect(createTree([])).to.eql(expectedResult);\n    });\n  });\n\n  describe('insert', function() {\n    it(\"should return old array with new number inserted in it\", function() {\n      input = 10;\n      expectedResult = [3,2,5,1,,4,10];\n      var tree =createTree(inputArray);\n      expect(insert(input,tree)).to.eql(expectedResult);\n    });\n  });\n\n  describe('insert with number already in it', function() {\n    it(\"should return old array\", function() {\n      input = 3;\n      expectedResult = [3,2,5,1,,4];\n      var tree = createTree(inputArray);\n      console.log(expectedResult);\n      expect(insert(input,tree)).to.eql(expectedResult);\n    });\n  });\n  describe('findNode', function() {\n    it('should return node key 1', function() {\n      input = 1;\n      expectedResult = 1;\n      var tree = createTree(inputArray);\n\n      expect(findNode(input,tree,0,0)).to.equal(expectedResult);\n    });\n  });\n\n  describe('findNode', function() {\n    it('should return undefined key', function() {\n      input = 10;\n      expectedResult = undefined;\n      var tree = createTree(inputArray);\n\n      expect(findNode(input,tree,0,0)).to.equal(expectedResult);\n    });\n  });\n\n\n  describe('inOrderTravelsal', function() {\n    it(\"should return an ordered array\", function() {\n      expectedResult = [1,2,3,4,5];\n      var tree = createTree(inputArray);\n\n      expect(inOrderTraversal(tree,0,[])).to.eql(expectedResult);\n    });\n  });\n  describe('empty inOrderTravelsal', function() {\n    it(\"should return an empty array\", function() {\n      expectedResult = [];\n\n      expect(inOrderTraversal([],0,[])).to.eql(expectedResult);\n    });\n  });\n});\n"]}